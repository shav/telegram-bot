package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/core/services/messages.chatStorage -o ./mocks\chat_storage.go -n ChatStorageMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	tr "github.com/shav/telegram-bot/internal/common/transactions"
	core_models "github.com/shav/telegram-bot/internal/modules/core/domain/models"
)

// ChatStorageMock implements core_services_messages.chatStorage
type ChatStorageMock struct {
	t minimock.Tester

	funcGetOrAdd          func(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat)) (chat *core_models.Chat, existed bool, err error)
	inspectFuncGetOrAdd   func(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat))
	afterGetOrAddCounter  uint64
	beforeGetOrAddCounter uint64
	GetOrAddMock          mChatStorageMockGetOrAdd

	funcUpdate          func(ctx context.Context, ts tr.Transaction, chat *core_models.Chat) (err error)
	inspectFuncUpdate   func(ctx context.Context, ts tr.Transaction, chat *core_models.Chat)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mChatStorageMockUpdate
}

// NewChatStorageMock returns a mock for core_services_messages.chatStorage
func NewChatStorageMock(t minimock.Tester) *ChatStorageMock {
	m := &ChatStorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetOrAddMock = mChatStorageMockGetOrAdd{mock: m}
	m.GetOrAddMock.callArgs = []*ChatStorageMockGetOrAddParams{}

	m.UpdateMock = mChatStorageMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*ChatStorageMockUpdateParams{}

	return m
}

type mChatStorageMockGetOrAdd struct {
	mock               *ChatStorageMock
	defaultExpectation *ChatStorageMockGetOrAddExpectation
	expectations       []*ChatStorageMockGetOrAddExpectation

	callArgs []*ChatStorageMockGetOrAddParams
	mutex    sync.RWMutex
}

// ChatStorageMockGetOrAddExpectation specifies expectation struct of the chatStorage.GetOrAdd
type ChatStorageMockGetOrAddExpectation struct {
	mock    *ChatStorageMock
	params  *ChatStorageMockGetOrAddParams
	results *ChatStorageMockGetOrAddResults
	Counter uint64
}

// ChatStorageMockGetOrAddParams contains parameters of the chatStorage.GetOrAdd
type ChatStorageMockGetOrAddParams struct {
	ctx         context.Context
	ts          tr.Transaction
	userId      int64
	chatFactory func(u int64) *core_models.Chat
	prepare     func(c *core_models.Chat)
}

// ChatStorageMockGetOrAddResults contains results of the chatStorage.GetOrAdd
type ChatStorageMockGetOrAddResults struct {
	chat    *core_models.Chat
	existed bool
	err     error
}

// Expect sets up expected params for chatStorage.GetOrAdd
func (mmGetOrAdd *mChatStorageMockGetOrAdd) Expect(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat)) *mChatStorageMockGetOrAdd {
	if mmGetOrAdd.mock.funcGetOrAdd != nil {
		mmGetOrAdd.mock.t.Fatalf("ChatStorageMock.GetOrAdd mock is already set by Set")
	}

	if mmGetOrAdd.defaultExpectation == nil {
		mmGetOrAdd.defaultExpectation = &ChatStorageMockGetOrAddExpectation{}
	}

	mmGetOrAdd.defaultExpectation.params = &ChatStorageMockGetOrAddParams{ctx, ts, userId, chatFactory, prepare}
	for _, e := range mmGetOrAdd.expectations {
		if minimock.Equal(e.params, mmGetOrAdd.defaultExpectation.params) {
			mmGetOrAdd.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOrAdd.defaultExpectation.params)
		}
	}

	return mmGetOrAdd
}

// Inspect accepts an inspector function that has same arguments as the chatStorage.GetOrAdd
func (mmGetOrAdd *mChatStorageMockGetOrAdd) Inspect(f func(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat))) *mChatStorageMockGetOrAdd {
	if mmGetOrAdd.mock.inspectFuncGetOrAdd != nil {
		mmGetOrAdd.mock.t.Fatalf("Inspect function is already set for ChatStorageMock.GetOrAdd")
	}

	mmGetOrAdd.mock.inspectFuncGetOrAdd = f

	return mmGetOrAdd
}

// Return sets up results that will be returned by chatStorage.GetOrAdd
func (mmGetOrAdd *mChatStorageMockGetOrAdd) Return(chat *core_models.Chat, existed bool, err error) *ChatStorageMock {
	if mmGetOrAdd.mock.funcGetOrAdd != nil {
		mmGetOrAdd.mock.t.Fatalf("ChatStorageMock.GetOrAdd mock is already set by Set")
	}

	if mmGetOrAdd.defaultExpectation == nil {
		mmGetOrAdd.defaultExpectation = &ChatStorageMockGetOrAddExpectation{mock: mmGetOrAdd.mock}
	}
	mmGetOrAdd.defaultExpectation.results = &ChatStorageMockGetOrAddResults{chat, existed, err}
	return mmGetOrAdd.mock
}

//Set uses given function f to mock the chatStorage.GetOrAdd method
func (mmGetOrAdd *mChatStorageMockGetOrAdd) Set(f func(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat)) (chat *core_models.Chat, existed bool, err error)) *ChatStorageMock {
	if mmGetOrAdd.defaultExpectation != nil {
		mmGetOrAdd.mock.t.Fatalf("Default expectation is already set for the chatStorage.GetOrAdd method")
	}

	if len(mmGetOrAdd.expectations) > 0 {
		mmGetOrAdd.mock.t.Fatalf("Some expectations are already set for the chatStorage.GetOrAdd method")
	}

	mmGetOrAdd.mock.funcGetOrAdd = f
	return mmGetOrAdd.mock
}

// When sets expectation for the chatStorage.GetOrAdd which will trigger the result defined by the following
// Then helper
func (mmGetOrAdd *mChatStorageMockGetOrAdd) When(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat)) *ChatStorageMockGetOrAddExpectation {
	if mmGetOrAdd.mock.funcGetOrAdd != nil {
		mmGetOrAdd.mock.t.Fatalf("ChatStorageMock.GetOrAdd mock is already set by Set")
	}

	expectation := &ChatStorageMockGetOrAddExpectation{
		mock:   mmGetOrAdd.mock,
		params: &ChatStorageMockGetOrAddParams{ctx, ts, userId, chatFactory, prepare},
	}
	mmGetOrAdd.expectations = append(mmGetOrAdd.expectations, expectation)
	return expectation
}

// Then sets up chatStorage.GetOrAdd return parameters for the expectation previously defined by the When method
func (e *ChatStorageMockGetOrAddExpectation) Then(chat *core_models.Chat, existed bool, err error) *ChatStorageMock {
	e.results = &ChatStorageMockGetOrAddResults{chat, existed, err}
	return e.mock
}

// GetOrAdd implements core_services_messages.chatStorage
func (mmGetOrAdd *ChatStorageMock) GetOrAdd(ctx context.Context, ts tr.Transaction, userId int64, chatFactory func(u int64) *core_models.Chat, prepare func(c *core_models.Chat)) (chat *core_models.Chat, existed bool, err error) {
	mm_atomic.AddUint64(&mmGetOrAdd.beforeGetOrAddCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrAdd.afterGetOrAddCounter, 1)

	if mmGetOrAdd.inspectFuncGetOrAdd != nil {
		mmGetOrAdd.inspectFuncGetOrAdd(ctx, ts, userId, chatFactory, prepare)
	}

	mm_params := &ChatStorageMockGetOrAddParams{ctx, ts, userId, chatFactory, prepare}

	// Record call args
	mmGetOrAdd.GetOrAddMock.mutex.Lock()
	mmGetOrAdd.GetOrAddMock.callArgs = append(mmGetOrAdd.GetOrAddMock.callArgs, mm_params)
	mmGetOrAdd.GetOrAddMock.mutex.Unlock()

	for _, e := range mmGetOrAdd.GetOrAddMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.chat, e.results.existed, e.results.err
		}
	}

	if mmGetOrAdd.GetOrAddMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrAdd.GetOrAddMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOrAdd.GetOrAddMock.defaultExpectation.params
		mm_got := ChatStorageMockGetOrAddParams{ctx, ts, userId, chatFactory, prepare}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOrAdd.t.Errorf("ChatStorageMock.GetOrAdd got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOrAdd.GetOrAddMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOrAdd.t.Fatal("No results are set for the ChatStorageMock.GetOrAdd")
		}
		return (*mm_results).chat, (*mm_results).existed, (*mm_results).err
	}
	if mmGetOrAdd.funcGetOrAdd != nil {
		return mmGetOrAdd.funcGetOrAdd(ctx, ts, userId, chatFactory, prepare)
	}
	mmGetOrAdd.t.Fatalf("Unexpected call to ChatStorageMock.GetOrAdd. %v %v %v %v %v", ctx, ts, userId, chatFactory, prepare)
	return
}

// GetOrAddAfterCounter returns a count of finished ChatStorageMock.GetOrAdd invocations
func (mmGetOrAdd *ChatStorageMock) GetOrAddAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrAdd.afterGetOrAddCounter)
}

// GetOrAddBeforeCounter returns a count of ChatStorageMock.GetOrAdd invocations
func (mmGetOrAdd *ChatStorageMock) GetOrAddBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrAdd.beforeGetOrAddCounter)
}

// Calls returns a list of arguments used in each call to ChatStorageMock.GetOrAdd.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOrAdd *mChatStorageMockGetOrAdd) Calls() []*ChatStorageMockGetOrAddParams {
	mmGetOrAdd.mutex.RLock()

	argCopy := make([]*ChatStorageMockGetOrAddParams, len(mmGetOrAdd.callArgs))
	copy(argCopy, mmGetOrAdd.callArgs)

	mmGetOrAdd.mutex.RUnlock()

	return argCopy
}

// MinimockGetOrAddDone returns true if the count of the GetOrAdd invocations corresponds
// the number of defined expectations
func (m *ChatStorageMock) MinimockGetOrAddDone() bool {
	for _, e := range m.GetOrAddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrAddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOrAddCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrAdd != nil && mm_atomic.LoadUint64(&m.afterGetOrAddCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOrAddInspect logs each unmet expectation
func (m *ChatStorageMock) MinimockGetOrAddInspect() {
	for _, e := range m.GetOrAddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatStorageMock.GetOrAdd with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrAddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOrAddCounter) < 1 {
		if m.GetOrAddMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatStorageMock.GetOrAdd")
		} else {
			m.t.Errorf("Expected call to ChatStorageMock.GetOrAdd with params: %#v", *m.GetOrAddMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrAdd != nil && mm_atomic.LoadUint64(&m.afterGetOrAddCounter) < 1 {
		m.t.Error("Expected call to ChatStorageMock.GetOrAdd")
	}
}

type mChatStorageMockUpdate struct {
	mock               *ChatStorageMock
	defaultExpectation *ChatStorageMockUpdateExpectation
	expectations       []*ChatStorageMockUpdateExpectation

	callArgs []*ChatStorageMockUpdateParams
	mutex    sync.RWMutex
}

// ChatStorageMockUpdateExpectation specifies expectation struct of the chatStorage.Update
type ChatStorageMockUpdateExpectation struct {
	mock    *ChatStorageMock
	params  *ChatStorageMockUpdateParams
	results *ChatStorageMockUpdateResults
	Counter uint64
}

// ChatStorageMockUpdateParams contains parameters of the chatStorage.Update
type ChatStorageMockUpdateParams struct {
	ctx  context.Context
	ts   tr.Transaction
	chat *core_models.Chat
}

// ChatStorageMockUpdateResults contains results of the chatStorage.Update
type ChatStorageMockUpdateResults struct {
	err error
}

// Expect sets up expected params for chatStorage.Update
func (mmUpdate *mChatStorageMockUpdate) Expect(ctx context.Context, ts tr.Transaction, chat *core_models.Chat) *mChatStorageMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("ChatStorageMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &ChatStorageMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &ChatStorageMockUpdateParams{ctx, ts, chat}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the chatStorage.Update
func (mmUpdate *mChatStorageMockUpdate) Inspect(f func(ctx context.Context, ts tr.Transaction, chat *core_models.Chat)) *mChatStorageMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for ChatStorageMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by chatStorage.Update
func (mmUpdate *mChatStorageMockUpdate) Return(err error) *ChatStorageMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("ChatStorageMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &ChatStorageMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &ChatStorageMockUpdateResults{err}
	return mmUpdate.mock
}

//Set uses given function f to mock the chatStorage.Update method
func (mmUpdate *mChatStorageMockUpdate) Set(f func(ctx context.Context, ts tr.Transaction, chat *core_models.Chat) (err error)) *ChatStorageMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the chatStorage.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the chatStorage.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the chatStorage.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mChatStorageMockUpdate) When(ctx context.Context, ts tr.Transaction, chat *core_models.Chat) *ChatStorageMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("ChatStorageMock.Update mock is already set by Set")
	}

	expectation := &ChatStorageMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &ChatStorageMockUpdateParams{ctx, ts, chat},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up chatStorage.Update return parameters for the expectation previously defined by the When method
func (e *ChatStorageMockUpdateExpectation) Then(err error) *ChatStorageMock {
	e.results = &ChatStorageMockUpdateResults{err}
	return e.mock
}

// Update implements core_services_messages.chatStorage
func (mmUpdate *ChatStorageMock) Update(ctx context.Context, ts tr.Transaction, chat *core_models.Chat) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, ts, chat)
	}

	mm_params := &ChatStorageMockUpdateParams{ctx, ts, chat}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := ChatStorageMockUpdateParams{ctx, ts, chat}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("ChatStorageMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the ChatStorageMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, ts, chat)
	}
	mmUpdate.t.Fatalf("Unexpected call to ChatStorageMock.Update. %v %v %v", ctx, ts, chat)
	return
}

// UpdateAfterCounter returns a count of finished ChatStorageMock.Update invocations
func (mmUpdate *ChatStorageMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of ChatStorageMock.Update invocations
func (mmUpdate *ChatStorageMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to ChatStorageMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mChatStorageMockUpdate) Calls() []*ChatStorageMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*ChatStorageMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *ChatStorageMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *ChatStorageMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatStorageMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatStorageMock.Update")
		} else {
			m.t.Errorf("Expected call to ChatStorageMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to ChatStorageMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatStorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetOrAddInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetOrAddDone() &&
		m.MinimockUpdateDone()
}
