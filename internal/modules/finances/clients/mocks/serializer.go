package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/clients.serializer -o ./mocks\serializer.go -n SerializerMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SerializerMock implements finance_clients.serializer
type SerializerMock struct {
	t minimock.Tester

	funcMarshal          func(object any) (ba1 []byte, err error)
	inspectFuncMarshal   func(object any)
	afterMarshalCounter  uint64
	beforeMarshalCounter uint64
	MarshalMock          mSerializerMockMarshal
}

// NewSerializerMock returns a mock for finance_clients.serializer
func NewSerializerMock(t minimock.Tester) *SerializerMock {
	m := &SerializerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.MarshalMock = mSerializerMockMarshal{mock: m}
	m.MarshalMock.callArgs = []*SerializerMockMarshalParams{}

	return m
}

type mSerializerMockMarshal struct {
	mock               *SerializerMock
	defaultExpectation *SerializerMockMarshalExpectation
	expectations       []*SerializerMockMarshalExpectation

	callArgs []*SerializerMockMarshalParams
	mutex    sync.RWMutex
}

// SerializerMockMarshalExpectation specifies expectation struct of the serializer.Marshal
type SerializerMockMarshalExpectation struct {
	mock    *SerializerMock
	params  *SerializerMockMarshalParams
	results *SerializerMockMarshalResults
	Counter uint64
}

// SerializerMockMarshalParams contains parameters of the serializer.Marshal
type SerializerMockMarshalParams struct {
	object any
}

// SerializerMockMarshalResults contains results of the serializer.Marshal
type SerializerMockMarshalResults struct {
	ba1 []byte
	err error
}

// Expect sets up expected params for serializer.Marshal
func (mmMarshal *mSerializerMockMarshal) Expect(object any) *mSerializerMockMarshal {
	if mmMarshal.mock.funcMarshal != nil {
		mmMarshal.mock.t.Fatalf("SerializerMock.Marshal mock is already set by Set")
	}

	if mmMarshal.defaultExpectation == nil {
		mmMarshal.defaultExpectation = &SerializerMockMarshalExpectation{}
	}

	mmMarshal.defaultExpectation.params = &SerializerMockMarshalParams{object}
	for _, e := range mmMarshal.expectations {
		if minimock.Equal(e.params, mmMarshal.defaultExpectation.params) {
			mmMarshal.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMarshal.defaultExpectation.params)
		}
	}

	return mmMarshal
}

// Inspect accepts an inspector function that has same arguments as the serializer.Marshal
func (mmMarshal *mSerializerMockMarshal) Inspect(f func(object any)) *mSerializerMockMarshal {
	if mmMarshal.mock.inspectFuncMarshal != nil {
		mmMarshal.mock.t.Fatalf("Inspect function is already set for SerializerMock.Marshal")
	}

	mmMarshal.mock.inspectFuncMarshal = f

	return mmMarshal
}

// Return sets up results that will be returned by serializer.Marshal
func (mmMarshal *mSerializerMockMarshal) Return(ba1 []byte, err error) *SerializerMock {
	if mmMarshal.mock.funcMarshal != nil {
		mmMarshal.mock.t.Fatalf("SerializerMock.Marshal mock is already set by Set")
	}

	if mmMarshal.defaultExpectation == nil {
		mmMarshal.defaultExpectation = &SerializerMockMarshalExpectation{mock: mmMarshal.mock}
	}
	mmMarshal.defaultExpectation.results = &SerializerMockMarshalResults{ba1, err}
	return mmMarshal.mock
}

//Set uses given function f to mock the serializer.Marshal method
func (mmMarshal *mSerializerMockMarshal) Set(f func(object any) (ba1 []byte, err error)) *SerializerMock {
	if mmMarshal.defaultExpectation != nil {
		mmMarshal.mock.t.Fatalf("Default expectation is already set for the serializer.Marshal method")
	}

	if len(mmMarshal.expectations) > 0 {
		mmMarshal.mock.t.Fatalf("Some expectations are already set for the serializer.Marshal method")
	}

	mmMarshal.mock.funcMarshal = f
	return mmMarshal.mock
}

// When sets expectation for the serializer.Marshal which will trigger the result defined by the following
// Then helper
func (mmMarshal *mSerializerMockMarshal) When(object any) *SerializerMockMarshalExpectation {
	if mmMarshal.mock.funcMarshal != nil {
		mmMarshal.mock.t.Fatalf("SerializerMock.Marshal mock is already set by Set")
	}

	expectation := &SerializerMockMarshalExpectation{
		mock:   mmMarshal.mock,
		params: &SerializerMockMarshalParams{object},
	}
	mmMarshal.expectations = append(mmMarshal.expectations, expectation)
	return expectation
}

// Then sets up serializer.Marshal return parameters for the expectation previously defined by the When method
func (e *SerializerMockMarshalExpectation) Then(ba1 []byte, err error) *SerializerMock {
	e.results = &SerializerMockMarshalResults{ba1, err}
	return e.mock
}

// Marshal implements finance_clients.serializer
func (mmMarshal *SerializerMock) Marshal(object any) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmMarshal.beforeMarshalCounter, 1)
	defer mm_atomic.AddUint64(&mmMarshal.afterMarshalCounter, 1)

	if mmMarshal.inspectFuncMarshal != nil {
		mmMarshal.inspectFuncMarshal(object)
	}

	mm_params := &SerializerMockMarshalParams{object}

	// Record call args
	mmMarshal.MarshalMock.mutex.Lock()
	mmMarshal.MarshalMock.callArgs = append(mmMarshal.MarshalMock.callArgs, mm_params)
	mmMarshal.MarshalMock.mutex.Unlock()

	for _, e := range mmMarshal.MarshalMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmMarshal.MarshalMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMarshal.MarshalMock.defaultExpectation.Counter, 1)
		mm_want := mmMarshal.MarshalMock.defaultExpectation.params
		mm_got := SerializerMockMarshalParams{object}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmMarshal.t.Errorf("SerializerMock.Marshal got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmMarshal.MarshalMock.defaultExpectation.results
		if mm_results == nil {
			mmMarshal.t.Fatal("No results are set for the SerializerMock.Marshal")
		}
		return (*mm_results).ba1, (*mm_results).err
	}
	if mmMarshal.funcMarshal != nil {
		return mmMarshal.funcMarshal(object)
	}
	mmMarshal.t.Fatalf("Unexpected call to SerializerMock.Marshal. %v", object)
	return
}

// MarshalAfterCounter returns a count of finished SerializerMock.Marshal invocations
func (mmMarshal *SerializerMock) MarshalAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMarshal.afterMarshalCounter)
}

// MarshalBeforeCounter returns a count of SerializerMock.Marshal invocations
func (mmMarshal *SerializerMock) MarshalBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMarshal.beforeMarshalCounter)
}

// Calls returns a list of arguments used in each call to SerializerMock.Marshal.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMarshal *mSerializerMockMarshal) Calls() []*SerializerMockMarshalParams {
	mmMarshal.mutex.RLock()

	argCopy := make([]*SerializerMockMarshalParams, len(mmMarshal.callArgs))
	copy(argCopy, mmMarshal.callArgs)

	mmMarshal.mutex.RUnlock()

	return argCopy
}

// MinimockMarshalDone returns true if the count of the Marshal invocations corresponds
// the number of defined expectations
func (m *SerializerMock) MinimockMarshalDone() bool {
	for _, e := range m.MarshalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MarshalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMarshal != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		return false
	}
	return true
}

// MinimockMarshalInspect logs each unmet expectation
func (m *SerializerMock) MinimockMarshalInspect() {
	for _, e := range m.MarshalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SerializerMock.Marshal with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MarshalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		if m.MarshalMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SerializerMock.Marshal")
		} else {
			m.t.Errorf("Expected call to SerializerMock.Marshal with params: %#v", *m.MarshalMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMarshal != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		m.t.Error("Expected call to SerializerMock.Marshal")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SerializerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockMarshalInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SerializerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SerializerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockMarshalDone()
}
