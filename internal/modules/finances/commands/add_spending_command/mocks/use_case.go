package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/commands/add_spending_command.useCase -o ./mocks\use_case.go -n UseCaseMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	finance_models "github.com/shav/telegram-bot/internal/modules/finances/domain/models"
)

// UseCaseMock implements finance_commands_add_spending.useCase
type UseCaseMock struct {
	t minimock.Tester

	funcAddUserSpending          func(ctx context.Context, userId int64, spending finance_models.Spending) (a1 finance_models.Amount, err error)
	inspectFuncAddUserSpending   func(ctx context.Context, userId int64, spending finance_models.Spending)
	afterAddUserSpendingCounter  uint64
	beforeAddUserSpendingCounter uint64
	AddUserSpendingMock          mUseCaseMockAddUserSpending
}

// NewUseCaseMock returns a mock for finance_commands_add_spending.useCase
func NewUseCaseMock(t minimock.Tester) *UseCaseMock {
	m := &UseCaseMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddUserSpendingMock = mUseCaseMockAddUserSpending{mock: m}
	m.AddUserSpendingMock.callArgs = []*UseCaseMockAddUserSpendingParams{}

	return m
}

type mUseCaseMockAddUserSpending struct {
	mock               *UseCaseMock
	defaultExpectation *UseCaseMockAddUserSpendingExpectation
	expectations       []*UseCaseMockAddUserSpendingExpectation

	callArgs []*UseCaseMockAddUserSpendingParams
	mutex    sync.RWMutex
}

// UseCaseMockAddUserSpendingExpectation specifies expectation struct of the useCase.AddUserSpending
type UseCaseMockAddUserSpendingExpectation struct {
	mock    *UseCaseMock
	params  *UseCaseMockAddUserSpendingParams
	results *UseCaseMockAddUserSpendingResults
	Counter uint64
}

// UseCaseMockAddUserSpendingParams contains parameters of the useCase.AddUserSpending
type UseCaseMockAddUserSpendingParams struct {
	ctx      context.Context
	userId   int64
	spending finance_models.Spending
}

// UseCaseMockAddUserSpendingResults contains results of the useCase.AddUserSpending
type UseCaseMockAddUserSpendingResults struct {
	a1  finance_models.Amount
	err error
}

// Expect sets up expected params for useCase.AddUserSpending
func (mmAddUserSpending *mUseCaseMockAddUserSpending) Expect(ctx context.Context, userId int64, spending finance_models.Spending) *mUseCaseMockAddUserSpending {
	if mmAddUserSpending.mock.funcAddUserSpending != nil {
		mmAddUserSpending.mock.t.Fatalf("UseCaseMock.AddUserSpending mock is already set by Set")
	}

	if mmAddUserSpending.defaultExpectation == nil {
		mmAddUserSpending.defaultExpectation = &UseCaseMockAddUserSpendingExpectation{}
	}

	mmAddUserSpending.defaultExpectation.params = &UseCaseMockAddUserSpendingParams{ctx, userId, spending}
	for _, e := range mmAddUserSpending.expectations {
		if minimock.Equal(e.params, mmAddUserSpending.defaultExpectation.params) {
			mmAddUserSpending.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddUserSpending.defaultExpectation.params)
		}
	}

	return mmAddUserSpending
}

// Inspect accepts an inspector function that has same arguments as the useCase.AddUserSpending
func (mmAddUserSpending *mUseCaseMockAddUserSpending) Inspect(f func(ctx context.Context, userId int64, spending finance_models.Spending)) *mUseCaseMockAddUserSpending {
	if mmAddUserSpending.mock.inspectFuncAddUserSpending != nil {
		mmAddUserSpending.mock.t.Fatalf("Inspect function is already set for UseCaseMock.AddUserSpending")
	}

	mmAddUserSpending.mock.inspectFuncAddUserSpending = f

	return mmAddUserSpending
}

// Return sets up results that will be returned by useCase.AddUserSpending
func (mmAddUserSpending *mUseCaseMockAddUserSpending) Return(a1 finance_models.Amount, err error) *UseCaseMock {
	if mmAddUserSpending.mock.funcAddUserSpending != nil {
		mmAddUserSpending.mock.t.Fatalf("UseCaseMock.AddUserSpending mock is already set by Set")
	}

	if mmAddUserSpending.defaultExpectation == nil {
		mmAddUserSpending.defaultExpectation = &UseCaseMockAddUserSpendingExpectation{mock: mmAddUserSpending.mock}
	}
	mmAddUserSpending.defaultExpectation.results = &UseCaseMockAddUserSpendingResults{a1, err}
	return mmAddUserSpending.mock
}

//Set uses given function f to mock the useCase.AddUserSpending method
func (mmAddUserSpending *mUseCaseMockAddUserSpending) Set(f func(ctx context.Context, userId int64, spending finance_models.Spending) (a1 finance_models.Amount, err error)) *UseCaseMock {
	if mmAddUserSpending.defaultExpectation != nil {
		mmAddUserSpending.mock.t.Fatalf("Default expectation is already set for the useCase.AddUserSpending method")
	}

	if len(mmAddUserSpending.expectations) > 0 {
		mmAddUserSpending.mock.t.Fatalf("Some expectations are already set for the useCase.AddUserSpending method")
	}

	mmAddUserSpending.mock.funcAddUserSpending = f
	return mmAddUserSpending.mock
}

// When sets expectation for the useCase.AddUserSpending which will trigger the result defined by the following
// Then helper
func (mmAddUserSpending *mUseCaseMockAddUserSpending) When(ctx context.Context, userId int64, spending finance_models.Spending) *UseCaseMockAddUserSpendingExpectation {
	if mmAddUserSpending.mock.funcAddUserSpending != nil {
		mmAddUserSpending.mock.t.Fatalf("UseCaseMock.AddUserSpending mock is already set by Set")
	}

	expectation := &UseCaseMockAddUserSpendingExpectation{
		mock:   mmAddUserSpending.mock,
		params: &UseCaseMockAddUserSpendingParams{ctx, userId, spending},
	}
	mmAddUserSpending.expectations = append(mmAddUserSpending.expectations, expectation)
	return expectation
}

// Then sets up useCase.AddUserSpending return parameters for the expectation previously defined by the When method
func (e *UseCaseMockAddUserSpendingExpectation) Then(a1 finance_models.Amount, err error) *UseCaseMock {
	e.results = &UseCaseMockAddUserSpendingResults{a1, err}
	return e.mock
}

// AddUserSpending implements finance_commands_add_spending.useCase
func (mmAddUserSpending *UseCaseMock) AddUserSpending(ctx context.Context, userId int64, spending finance_models.Spending) (a1 finance_models.Amount, err error) {
	mm_atomic.AddUint64(&mmAddUserSpending.beforeAddUserSpendingCounter, 1)
	defer mm_atomic.AddUint64(&mmAddUserSpending.afterAddUserSpendingCounter, 1)

	if mmAddUserSpending.inspectFuncAddUserSpending != nil {
		mmAddUserSpending.inspectFuncAddUserSpending(ctx, userId, spending)
	}

	mm_params := &UseCaseMockAddUserSpendingParams{ctx, userId, spending}

	// Record call args
	mmAddUserSpending.AddUserSpendingMock.mutex.Lock()
	mmAddUserSpending.AddUserSpendingMock.callArgs = append(mmAddUserSpending.AddUserSpendingMock.callArgs, mm_params)
	mmAddUserSpending.AddUserSpendingMock.mutex.Unlock()

	for _, e := range mmAddUserSpending.AddUserSpendingMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1, e.results.err
		}
	}

	if mmAddUserSpending.AddUserSpendingMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddUserSpending.AddUserSpendingMock.defaultExpectation.Counter, 1)
		mm_want := mmAddUserSpending.AddUserSpendingMock.defaultExpectation.params
		mm_got := UseCaseMockAddUserSpendingParams{ctx, userId, spending}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddUserSpending.t.Errorf("UseCaseMock.AddUserSpending got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddUserSpending.AddUserSpendingMock.defaultExpectation.results
		if mm_results == nil {
			mmAddUserSpending.t.Fatal("No results are set for the UseCaseMock.AddUserSpending")
		}
		return (*mm_results).a1, (*mm_results).err
	}
	if mmAddUserSpending.funcAddUserSpending != nil {
		return mmAddUserSpending.funcAddUserSpending(ctx, userId, spending)
	}
	mmAddUserSpending.t.Fatalf("Unexpected call to UseCaseMock.AddUserSpending. %v %v %v", ctx, userId, spending)
	return
}

// AddUserSpendingAfterCounter returns a count of finished UseCaseMock.AddUserSpending invocations
func (mmAddUserSpending *UseCaseMock) AddUserSpendingAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUserSpending.afterAddUserSpendingCounter)
}

// AddUserSpendingBeforeCounter returns a count of UseCaseMock.AddUserSpending invocations
func (mmAddUserSpending *UseCaseMock) AddUserSpendingBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUserSpending.beforeAddUserSpendingCounter)
}

// Calls returns a list of arguments used in each call to UseCaseMock.AddUserSpending.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddUserSpending *mUseCaseMockAddUserSpending) Calls() []*UseCaseMockAddUserSpendingParams {
	mmAddUserSpending.mutex.RLock()

	argCopy := make([]*UseCaseMockAddUserSpendingParams, len(mmAddUserSpending.callArgs))
	copy(argCopy, mmAddUserSpending.callArgs)

	mmAddUserSpending.mutex.RUnlock()

	return argCopy
}

// MinimockAddUserSpendingDone returns true if the count of the AddUserSpending invocations corresponds
// the number of defined expectations
func (m *UseCaseMock) MinimockAddUserSpendingDone() bool {
	for _, e := range m.AddUserSpendingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddUserSpendingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddUserSpendingCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUserSpending != nil && mm_atomic.LoadUint64(&m.afterAddUserSpendingCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddUserSpendingInspect logs each unmet expectation
func (m *UseCaseMock) MinimockAddUserSpendingInspect() {
	for _, e := range m.AddUserSpendingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UseCaseMock.AddUserSpending with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddUserSpendingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddUserSpendingCounter) < 1 {
		if m.AddUserSpendingMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UseCaseMock.AddUserSpending")
		} else {
			m.t.Errorf("Expected call to UseCaseMock.AddUserSpending with params: %#v", *m.AddUserSpendingMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUserSpending != nil && mm_atomic.LoadUint64(&m.afterAddUserSpendingCounter) < 1 {
		m.t.Error("Expected call to UseCaseMock.AddUserSpending")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UseCaseMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddUserSpendingInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UseCaseMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UseCaseMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddUserSpendingDone()
}
