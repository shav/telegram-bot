package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/commands/change_currency_command.useCase -o ./mocks\use_case.go -n UseCaseMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	finance_models "github.com/shav/telegram-bot/internal/modules/finances/domain/models"
)

// UseCaseMock implements finance_commands_change_currency.useCase
type UseCaseMock struct {
	t minimock.Tester

	funcChangeCurrency          func(ctx context.Context, userId int64, newCurrency finance_models.Currency) (err error)
	inspectFuncChangeCurrency   func(ctx context.Context, userId int64, newCurrency finance_models.Currency)
	afterChangeCurrencyCounter  uint64
	beforeChangeCurrencyCounter uint64
	ChangeCurrencyMock          mUseCaseMockChangeCurrency
}

// NewUseCaseMock returns a mock for finance_commands_change_currency.useCase
func NewUseCaseMock(t minimock.Tester) *UseCaseMock {
	m := &UseCaseMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChangeCurrencyMock = mUseCaseMockChangeCurrency{mock: m}
	m.ChangeCurrencyMock.callArgs = []*UseCaseMockChangeCurrencyParams{}

	return m
}

type mUseCaseMockChangeCurrency struct {
	mock               *UseCaseMock
	defaultExpectation *UseCaseMockChangeCurrencyExpectation
	expectations       []*UseCaseMockChangeCurrencyExpectation

	callArgs []*UseCaseMockChangeCurrencyParams
	mutex    sync.RWMutex
}

// UseCaseMockChangeCurrencyExpectation specifies expectation struct of the useCase.ChangeCurrency
type UseCaseMockChangeCurrencyExpectation struct {
	mock    *UseCaseMock
	params  *UseCaseMockChangeCurrencyParams
	results *UseCaseMockChangeCurrencyResults
	Counter uint64
}

// UseCaseMockChangeCurrencyParams contains parameters of the useCase.ChangeCurrency
type UseCaseMockChangeCurrencyParams struct {
	ctx         context.Context
	userId      int64
	newCurrency finance_models.Currency
}

// UseCaseMockChangeCurrencyResults contains results of the useCase.ChangeCurrency
type UseCaseMockChangeCurrencyResults struct {
	err error
}

// Expect sets up expected params for useCase.ChangeCurrency
func (mmChangeCurrency *mUseCaseMockChangeCurrency) Expect(ctx context.Context, userId int64, newCurrency finance_models.Currency) *mUseCaseMockChangeCurrency {
	if mmChangeCurrency.mock.funcChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("UseCaseMock.ChangeCurrency mock is already set by Set")
	}

	if mmChangeCurrency.defaultExpectation == nil {
		mmChangeCurrency.defaultExpectation = &UseCaseMockChangeCurrencyExpectation{}
	}

	mmChangeCurrency.defaultExpectation.params = &UseCaseMockChangeCurrencyParams{ctx, userId, newCurrency}
	for _, e := range mmChangeCurrency.expectations {
		if minimock.Equal(e.params, mmChangeCurrency.defaultExpectation.params) {
			mmChangeCurrency.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChangeCurrency.defaultExpectation.params)
		}
	}

	return mmChangeCurrency
}

// Inspect accepts an inspector function that has same arguments as the useCase.ChangeCurrency
func (mmChangeCurrency *mUseCaseMockChangeCurrency) Inspect(f func(ctx context.Context, userId int64, newCurrency finance_models.Currency)) *mUseCaseMockChangeCurrency {
	if mmChangeCurrency.mock.inspectFuncChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("Inspect function is already set for UseCaseMock.ChangeCurrency")
	}

	mmChangeCurrency.mock.inspectFuncChangeCurrency = f

	return mmChangeCurrency
}

// Return sets up results that will be returned by useCase.ChangeCurrency
func (mmChangeCurrency *mUseCaseMockChangeCurrency) Return(err error) *UseCaseMock {
	if mmChangeCurrency.mock.funcChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("UseCaseMock.ChangeCurrency mock is already set by Set")
	}

	if mmChangeCurrency.defaultExpectation == nil {
		mmChangeCurrency.defaultExpectation = &UseCaseMockChangeCurrencyExpectation{mock: mmChangeCurrency.mock}
	}
	mmChangeCurrency.defaultExpectation.results = &UseCaseMockChangeCurrencyResults{err}
	return mmChangeCurrency.mock
}

//Set uses given function f to mock the useCase.ChangeCurrency method
func (mmChangeCurrency *mUseCaseMockChangeCurrency) Set(f func(ctx context.Context, userId int64, newCurrency finance_models.Currency) (err error)) *UseCaseMock {
	if mmChangeCurrency.defaultExpectation != nil {
		mmChangeCurrency.mock.t.Fatalf("Default expectation is already set for the useCase.ChangeCurrency method")
	}

	if len(mmChangeCurrency.expectations) > 0 {
		mmChangeCurrency.mock.t.Fatalf("Some expectations are already set for the useCase.ChangeCurrency method")
	}

	mmChangeCurrency.mock.funcChangeCurrency = f
	return mmChangeCurrency.mock
}

// When sets expectation for the useCase.ChangeCurrency which will trigger the result defined by the following
// Then helper
func (mmChangeCurrency *mUseCaseMockChangeCurrency) When(ctx context.Context, userId int64, newCurrency finance_models.Currency) *UseCaseMockChangeCurrencyExpectation {
	if mmChangeCurrency.mock.funcChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("UseCaseMock.ChangeCurrency mock is already set by Set")
	}

	expectation := &UseCaseMockChangeCurrencyExpectation{
		mock:   mmChangeCurrency.mock,
		params: &UseCaseMockChangeCurrencyParams{ctx, userId, newCurrency},
	}
	mmChangeCurrency.expectations = append(mmChangeCurrency.expectations, expectation)
	return expectation
}

// Then sets up useCase.ChangeCurrency return parameters for the expectation previously defined by the When method
func (e *UseCaseMockChangeCurrencyExpectation) Then(err error) *UseCaseMock {
	e.results = &UseCaseMockChangeCurrencyResults{err}
	return e.mock
}

// ChangeCurrency implements finance_commands_change_currency.useCase
func (mmChangeCurrency *UseCaseMock) ChangeCurrency(ctx context.Context, userId int64, newCurrency finance_models.Currency) (err error) {
	mm_atomic.AddUint64(&mmChangeCurrency.beforeChangeCurrencyCounter, 1)
	defer mm_atomic.AddUint64(&mmChangeCurrency.afterChangeCurrencyCounter, 1)

	if mmChangeCurrency.inspectFuncChangeCurrency != nil {
		mmChangeCurrency.inspectFuncChangeCurrency(ctx, userId, newCurrency)
	}

	mm_params := &UseCaseMockChangeCurrencyParams{ctx, userId, newCurrency}

	// Record call args
	mmChangeCurrency.ChangeCurrencyMock.mutex.Lock()
	mmChangeCurrency.ChangeCurrencyMock.callArgs = append(mmChangeCurrency.ChangeCurrencyMock.callArgs, mm_params)
	mmChangeCurrency.ChangeCurrencyMock.mutex.Unlock()

	for _, e := range mmChangeCurrency.ChangeCurrencyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmChangeCurrency.ChangeCurrencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChangeCurrency.ChangeCurrencyMock.defaultExpectation.Counter, 1)
		mm_want := mmChangeCurrency.ChangeCurrencyMock.defaultExpectation.params
		mm_got := UseCaseMockChangeCurrencyParams{ctx, userId, newCurrency}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChangeCurrency.t.Errorf("UseCaseMock.ChangeCurrency got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChangeCurrency.ChangeCurrencyMock.defaultExpectation.results
		if mm_results == nil {
			mmChangeCurrency.t.Fatal("No results are set for the UseCaseMock.ChangeCurrency")
		}
		return (*mm_results).err
	}
	if mmChangeCurrency.funcChangeCurrency != nil {
		return mmChangeCurrency.funcChangeCurrency(ctx, userId, newCurrency)
	}
	mmChangeCurrency.t.Fatalf("Unexpected call to UseCaseMock.ChangeCurrency. %v %v %v", ctx, userId, newCurrency)
	return
}

// ChangeCurrencyAfterCounter returns a count of finished UseCaseMock.ChangeCurrency invocations
func (mmChangeCurrency *UseCaseMock) ChangeCurrencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChangeCurrency.afterChangeCurrencyCounter)
}

// ChangeCurrencyBeforeCounter returns a count of UseCaseMock.ChangeCurrency invocations
func (mmChangeCurrency *UseCaseMock) ChangeCurrencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChangeCurrency.beforeChangeCurrencyCounter)
}

// Calls returns a list of arguments used in each call to UseCaseMock.ChangeCurrency.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChangeCurrency *mUseCaseMockChangeCurrency) Calls() []*UseCaseMockChangeCurrencyParams {
	mmChangeCurrency.mutex.RLock()

	argCopy := make([]*UseCaseMockChangeCurrencyParams, len(mmChangeCurrency.callArgs))
	copy(argCopy, mmChangeCurrency.callArgs)

	mmChangeCurrency.mutex.RUnlock()

	return argCopy
}

// MinimockChangeCurrencyDone returns true if the count of the ChangeCurrency invocations corresponds
// the number of defined expectations
func (m *UseCaseMock) MinimockChangeCurrencyDone() bool {
	for _, e := range m.ChangeCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChangeCurrency != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockChangeCurrencyInspect logs each unmet expectation
func (m *UseCaseMock) MinimockChangeCurrencyInspect() {
	for _, e := range m.ChangeCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UseCaseMock.ChangeCurrency with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		if m.ChangeCurrencyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UseCaseMock.ChangeCurrency")
		} else {
			m.t.Errorf("Expected call to UseCaseMock.ChangeCurrency with params: %#v", *m.ChangeCurrencyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChangeCurrency != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		m.t.Error("Expected call to UseCaseMock.ChangeCurrency")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UseCaseMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockChangeCurrencyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UseCaseMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UseCaseMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChangeCurrencyDone()
}
