package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/domain/reports/spendings.spendingStorage -o ./mocks\spending_storage.go -n SpendingStorageMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/shav/telegram-bot/internal/common/date"
	tr "github.com/shav/telegram-bot/internal/common/transactions"
	finance_models "github.com/shav/telegram-bot/internal/modules/finances/domain/models"
)

// SpendingStorageMock implements finance_reports.spendingStorage
type SpendingStorageMock struct {
	t minimock.Tester

	funcGetSpendingsByCategories          func(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval) (s1 finance_models.SpendingsByCategoryTable, err error)
	inspectFuncGetSpendingsByCategories   func(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval)
	afterGetSpendingsByCategoriesCounter  uint64
	beforeGetSpendingsByCategoriesCounter uint64
	GetSpendingsByCategoriesMock          mSpendingStorageMockGetSpendingsByCategories
}

// NewSpendingStorageMock returns a mock for finance_reports.spendingStorage
func NewSpendingStorageMock(t minimock.Tester) *SpendingStorageMock {
	m := &SpendingStorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetSpendingsByCategoriesMock = mSpendingStorageMockGetSpendingsByCategories{mock: m}
	m.GetSpendingsByCategoriesMock.callArgs = []*SpendingStorageMockGetSpendingsByCategoriesParams{}

	return m
}

type mSpendingStorageMockGetSpendingsByCategories struct {
	mock               *SpendingStorageMock
	defaultExpectation *SpendingStorageMockGetSpendingsByCategoriesExpectation
	expectations       []*SpendingStorageMockGetSpendingsByCategoriesExpectation

	callArgs []*SpendingStorageMockGetSpendingsByCategoriesParams
	mutex    sync.RWMutex
}

// SpendingStorageMockGetSpendingsByCategoriesExpectation specifies expectation struct of the spendingStorage.GetSpendingsByCategories
type SpendingStorageMockGetSpendingsByCategoriesExpectation struct {
	mock    *SpendingStorageMock
	params  *SpendingStorageMockGetSpendingsByCategoriesParams
	results *SpendingStorageMockGetSpendingsByCategoriesResults
	Counter uint64
}

// SpendingStorageMockGetSpendingsByCategoriesParams contains parameters of the spendingStorage.GetSpendingsByCategories
type SpendingStorageMockGetSpendingsByCategoriesParams struct {
	ctx      context.Context
	ts       tr.Transaction
	userId   int64
	interval date.Interval
}

// SpendingStorageMockGetSpendingsByCategoriesResults contains results of the spendingStorage.GetSpendingsByCategories
type SpendingStorageMockGetSpendingsByCategoriesResults struct {
	s1  finance_models.SpendingsByCategoryTable
	err error
}

// Expect sets up expected params for spendingStorage.GetSpendingsByCategories
func (mmGetSpendingsByCategories *mSpendingStorageMockGetSpendingsByCategories) Expect(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval) *mSpendingStorageMockGetSpendingsByCategories {
	if mmGetSpendingsByCategories.mock.funcGetSpendingsByCategories != nil {
		mmGetSpendingsByCategories.mock.t.Fatalf("SpendingStorageMock.GetSpendingsByCategories mock is already set by Set")
	}

	if mmGetSpendingsByCategories.defaultExpectation == nil {
		mmGetSpendingsByCategories.defaultExpectation = &SpendingStorageMockGetSpendingsByCategoriesExpectation{}
	}

	mmGetSpendingsByCategories.defaultExpectation.params = &SpendingStorageMockGetSpendingsByCategoriesParams{ctx, ts, userId, interval}
	for _, e := range mmGetSpendingsByCategories.expectations {
		if minimock.Equal(e.params, mmGetSpendingsByCategories.defaultExpectation.params) {
			mmGetSpendingsByCategories.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSpendingsByCategories.defaultExpectation.params)
		}
	}

	return mmGetSpendingsByCategories
}

// Inspect accepts an inspector function that has same arguments as the spendingStorage.GetSpendingsByCategories
func (mmGetSpendingsByCategories *mSpendingStorageMockGetSpendingsByCategories) Inspect(f func(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval)) *mSpendingStorageMockGetSpendingsByCategories {
	if mmGetSpendingsByCategories.mock.inspectFuncGetSpendingsByCategories != nil {
		mmGetSpendingsByCategories.mock.t.Fatalf("Inspect function is already set for SpendingStorageMock.GetSpendingsByCategories")
	}

	mmGetSpendingsByCategories.mock.inspectFuncGetSpendingsByCategories = f

	return mmGetSpendingsByCategories
}

// Return sets up results that will be returned by spendingStorage.GetSpendingsByCategories
func (mmGetSpendingsByCategories *mSpendingStorageMockGetSpendingsByCategories) Return(s1 finance_models.SpendingsByCategoryTable, err error) *SpendingStorageMock {
	if mmGetSpendingsByCategories.mock.funcGetSpendingsByCategories != nil {
		mmGetSpendingsByCategories.mock.t.Fatalf("SpendingStorageMock.GetSpendingsByCategories mock is already set by Set")
	}

	if mmGetSpendingsByCategories.defaultExpectation == nil {
		mmGetSpendingsByCategories.defaultExpectation = &SpendingStorageMockGetSpendingsByCategoriesExpectation{mock: mmGetSpendingsByCategories.mock}
	}
	mmGetSpendingsByCategories.defaultExpectation.results = &SpendingStorageMockGetSpendingsByCategoriesResults{s1, err}
	return mmGetSpendingsByCategories.mock
}

//Set uses given function f to mock the spendingStorage.GetSpendingsByCategories method
func (mmGetSpendingsByCategories *mSpendingStorageMockGetSpendingsByCategories) Set(f func(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval) (s1 finance_models.SpendingsByCategoryTable, err error)) *SpendingStorageMock {
	if mmGetSpendingsByCategories.defaultExpectation != nil {
		mmGetSpendingsByCategories.mock.t.Fatalf("Default expectation is already set for the spendingStorage.GetSpendingsByCategories method")
	}

	if len(mmGetSpendingsByCategories.expectations) > 0 {
		mmGetSpendingsByCategories.mock.t.Fatalf("Some expectations are already set for the spendingStorage.GetSpendingsByCategories method")
	}

	mmGetSpendingsByCategories.mock.funcGetSpendingsByCategories = f
	return mmGetSpendingsByCategories.mock
}

// When sets expectation for the spendingStorage.GetSpendingsByCategories which will trigger the result defined by the following
// Then helper
func (mmGetSpendingsByCategories *mSpendingStorageMockGetSpendingsByCategories) When(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval) *SpendingStorageMockGetSpendingsByCategoriesExpectation {
	if mmGetSpendingsByCategories.mock.funcGetSpendingsByCategories != nil {
		mmGetSpendingsByCategories.mock.t.Fatalf("SpendingStorageMock.GetSpendingsByCategories mock is already set by Set")
	}

	expectation := &SpendingStorageMockGetSpendingsByCategoriesExpectation{
		mock:   mmGetSpendingsByCategories.mock,
		params: &SpendingStorageMockGetSpendingsByCategoriesParams{ctx, ts, userId, interval},
	}
	mmGetSpendingsByCategories.expectations = append(mmGetSpendingsByCategories.expectations, expectation)
	return expectation
}

// Then sets up spendingStorage.GetSpendingsByCategories return parameters for the expectation previously defined by the When method
func (e *SpendingStorageMockGetSpendingsByCategoriesExpectation) Then(s1 finance_models.SpendingsByCategoryTable, err error) *SpendingStorageMock {
	e.results = &SpendingStorageMockGetSpendingsByCategoriesResults{s1, err}
	return e.mock
}

// GetSpendingsByCategories implements finance_reports.spendingStorage
func (mmGetSpendingsByCategories *SpendingStorageMock) GetSpendingsByCategories(ctx context.Context, ts tr.Transaction, userId int64, interval date.Interval) (s1 finance_models.SpendingsByCategoryTable, err error) {
	mm_atomic.AddUint64(&mmGetSpendingsByCategories.beforeGetSpendingsByCategoriesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSpendingsByCategories.afterGetSpendingsByCategoriesCounter, 1)

	if mmGetSpendingsByCategories.inspectFuncGetSpendingsByCategories != nil {
		mmGetSpendingsByCategories.inspectFuncGetSpendingsByCategories(ctx, ts, userId, interval)
	}

	mm_params := &SpendingStorageMockGetSpendingsByCategoriesParams{ctx, ts, userId, interval}

	// Record call args
	mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.mutex.Lock()
	mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.callArgs = append(mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.callArgs, mm_params)
	mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.mutex.Unlock()

	for _, e := range mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.defaultExpectation.params
		mm_got := SpendingStorageMockGetSpendingsByCategoriesParams{ctx, ts, userId, interval}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSpendingsByCategories.t.Errorf("SpendingStorageMock.GetSpendingsByCategories got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSpendingsByCategories.GetSpendingsByCategoriesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSpendingsByCategories.t.Fatal("No results are set for the SpendingStorageMock.GetSpendingsByCategories")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetSpendingsByCategories.funcGetSpendingsByCategories != nil {
		return mmGetSpendingsByCategories.funcGetSpendingsByCategories(ctx, ts, userId, interval)
	}
	mmGetSpendingsByCategories.t.Fatalf("Unexpected call to SpendingStorageMock.GetSpendingsByCategories. %v %v %v %v", ctx, ts, userId, interval)
	return
}

// GetSpendingsByCategoriesAfterCounter returns a count of finished SpendingStorageMock.GetSpendingsByCategories invocations
func (mmGetSpendingsByCategories *SpendingStorageMock) GetSpendingsByCategoriesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpendingsByCategories.afterGetSpendingsByCategoriesCounter)
}

// GetSpendingsByCategoriesBeforeCounter returns a count of SpendingStorageMock.GetSpendingsByCategories invocations
func (mmGetSpendingsByCategories *SpendingStorageMock) GetSpendingsByCategoriesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpendingsByCategories.beforeGetSpendingsByCategoriesCounter)
}

// Calls returns a list of arguments used in each call to SpendingStorageMock.GetSpendingsByCategories.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSpendingsByCategories *mSpendingStorageMockGetSpendingsByCategories) Calls() []*SpendingStorageMockGetSpendingsByCategoriesParams {
	mmGetSpendingsByCategories.mutex.RLock()

	argCopy := make([]*SpendingStorageMockGetSpendingsByCategoriesParams, len(mmGetSpendingsByCategories.callArgs))
	copy(argCopy, mmGetSpendingsByCategories.callArgs)

	mmGetSpendingsByCategories.mutex.RUnlock()

	return argCopy
}

// MinimockGetSpendingsByCategoriesDone returns true if the count of the GetSpendingsByCategories invocations corresponds
// the number of defined expectations
func (m *SpendingStorageMock) MinimockGetSpendingsByCategoriesDone() bool {
	for _, e := range m.GetSpendingsByCategoriesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpendingsByCategoriesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpendingsByCategoriesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpendingsByCategories != nil && mm_atomic.LoadUint64(&m.afterGetSpendingsByCategoriesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSpendingsByCategoriesInspect logs each unmet expectation
func (m *SpendingStorageMock) MinimockGetSpendingsByCategoriesInspect() {
	for _, e := range m.GetSpendingsByCategoriesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SpendingStorageMock.GetSpendingsByCategories with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpendingsByCategoriesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpendingsByCategoriesCounter) < 1 {
		if m.GetSpendingsByCategoriesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SpendingStorageMock.GetSpendingsByCategories")
		} else {
			m.t.Errorf("Expected call to SpendingStorageMock.GetSpendingsByCategories with params: %#v", *m.GetSpendingsByCategoriesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpendingsByCategories != nil && mm_atomic.LoadUint64(&m.afterGetSpendingsByCategoriesCounter) < 1 {
		m.t.Error("Expected call to SpendingStorageMock.GetSpendingsByCategories")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SpendingStorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetSpendingsByCategoriesInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SpendingStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SpendingStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetSpendingsByCategoriesDone()
}
