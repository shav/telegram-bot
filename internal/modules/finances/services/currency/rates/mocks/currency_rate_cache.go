package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/services/currency/rates.CurrencyRateCache -o ./mocks\currency_rate_cache.go -n CurrencyRateCacheMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	tr "github.com/shav/telegram-bot/internal/common/transactions"
	finance_models "github.com/shav/telegram-bot/internal/modules/finances/domain/models"
)

// CurrencyRateCacheMock implements finance_services_currency.CurrencyRateCache
type CurrencyRateCacheMock struct {
	t minimock.Tester

	funcGetActualRate          func(ctx context.Context, ts tr.Transaction, currency finance_models.Currency) (rate finance_models.CurrencyRate, exists bool, err error)
	inspectFuncGetActualRate   func(ctx context.Context, ts tr.Transaction, currency finance_models.Currency)
	afterGetActualRateCounter  uint64
	beforeGetActualRateCounter uint64
	GetActualRateMock          mCurrencyRateCacheMockGetActualRate

	funcUpdate          func(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate) (err error)
	inspectFuncUpdate   func(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mCurrencyRateCacheMockUpdate
}

// NewCurrencyRateCacheMock returns a mock for finance_services_currency.CurrencyRateCache
func NewCurrencyRateCacheMock(t minimock.Tester) *CurrencyRateCacheMock {
	m := &CurrencyRateCacheMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetActualRateMock = mCurrencyRateCacheMockGetActualRate{mock: m}
	m.GetActualRateMock.callArgs = []*CurrencyRateCacheMockGetActualRateParams{}

	m.UpdateMock = mCurrencyRateCacheMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*CurrencyRateCacheMockUpdateParams{}

	return m
}

type mCurrencyRateCacheMockGetActualRate struct {
	mock               *CurrencyRateCacheMock
	defaultExpectation *CurrencyRateCacheMockGetActualRateExpectation
	expectations       []*CurrencyRateCacheMockGetActualRateExpectation

	callArgs []*CurrencyRateCacheMockGetActualRateParams
	mutex    sync.RWMutex
}

// CurrencyRateCacheMockGetActualRateExpectation specifies expectation struct of the CurrencyRateCache.GetActualRate
type CurrencyRateCacheMockGetActualRateExpectation struct {
	mock    *CurrencyRateCacheMock
	params  *CurrencyRateCacheMockGetActualRateParams
	results *CurrencyRateCacheMockGetActualRateResults
	Counter uint64
}

// CurrencyRateCacheMockGetActualRateParams contains parameters of the CurrencyRateCache.GetActualRate
type CurrencyRateCacheMockGetActualRateParams struct {
	ctx      context.Context
	ts       tr.Transaction
	currency finance_models.Currency
}

// CurrencyRateCacheMockGetActualRateResults contains results of the CurrencyRateCache.GetActualRate
type CurrencyRateCacheMockGetActualRateResults struct {
	rate   finance_models.CurrencyRate
	exists bool
	err    error
}

// Expect sets up expected params for CurrencyRateCache.GetActualRate
func (mmGetActualRate *mCurrencyRateCacheMockGetActualRate) Expect(ctx context.Context, ts tr.Transaction, currency finance_models.Currency) *mCurrencyRateCacheMockGetActualRate {
	if mmGetActualRate.mock.funcGetActualRate != nil {
		mmGetActualRate.mock.t.Fatalf("CurrencyRateCacheMock.GetActualRate mock is already set by Set")
	}

	if mmGetActualRate.defaultExpectation == nil {
		mmGetActualRate.defaultExpectation = &CurrencyRateCacheMockGetActualRateExpectation{}
	}

	mmGetActualRate.defaultExpectation.params = &CurrencyRateCacheMockGetActualRateParams{ctx, ts, currency}
	for _, e := range mmGetActualRate.expectations {
		if minimock.Equal(e.params, mmGetActualRate.defaultExpectation.params) {
			mmGetActualRate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetActualRate.defaultExpectation.params)
		}
	}

	return mmGetActualRate
}

// Inspect accepts an inspector function that has same arguments as the CurrencyRateCache.GetActualRate
func (mmGetActualRate *mCurrencyRateCacheMockGetActualRate) Inspect(f func(ctx context.Context, ts tr.Transaction, currency finance_models.Currency)) *mCurrencyRateCacheMockGetActualRate {
	if mmGetActualRate.mock.inspectFuncGetActualRate != nil {
		mmGetActualRate.mock.t.Fatalf("Inspect function is already set for CurrencyRateCacheMock.GetActualRate")
	}

	mmGetActualRate.mock.inspectFuncGetActualRate = f

	return mmGetActualRate
}

// Return sets up results that will be returned by CurrencyRateCache.GetActualRate
func (mmGetActualRate *mCurrencyRateCacheMockGetActualRate) Return(rate finance_models.CurrencyRate, exists bool, err error) *CurrencyRateCacheMock {
	if mmGetActualRate.mock.funcGetActualRate != nil {
		mmGetActualRate.mock.t.Fatalf("CurrencyRateCacheMock.GetActualRate mock is already set by Set")
	}

	if mmGetActualRate.defaultExpectation == nil {
		mmGetActualRate.defaultExpectation = &CurrencyRateCacheMockGetActualRateExpectation{mock: mmGetActualRate.mock}
	}
	mmGetActualRate.defaultExpectation.results = &CurrencyRateCacheMockGetActualRateResults{rate, exists, err}
	return mmGetActualRate.mock
}

//Set uses given function f to mock the CurrencyRateCache.GetActualRate method
func (mmGetActualRate *mCurrencyRateCacheMockGetActualRate) Set(f func(ctx context.Context, ts tr.Transaction, currency finance_models.Currency) (rate finance_models.CurrencyRate, exists bool, err error)) *CurrencyRateCacheMock {
	if mmGetActualRate.defaultExpectation != nil {
		mmGetActualRate.mock.t.Fatalf("Default expectation is already set for the CurrencyRateCache.GetActualRate method")
	}

	if len(mmGetActualRate.expectations) > 0 {
		mmGetActualRate.mock.t.Fatalf("Some expectations are already set for the CurrencyRateCache.GetActualRate method")
	}

	mmGetActualRate.mock.funcGetActualRate = f
	return mmGetActualRate.mock
}

// When sets expectation for the CurrencyRateCache.GetActualRate which will trigger the result defined by the following
// Then helper
func (mmGetActualRate *mCurrencyRateCacheMockGetActualRate) When(ctx context.Context, ts tr.Transaction, currency finance_models.Currency) *CurrencyRateCacheMockGetActualRateExpectation {
	if mmGetActualRate.mock.funcGetActualRate != nil {
		mmGetActualRate.mock.t.Fatalf("CurrencyRateCacheMock.GetActualRate mock is already set by Set")
	}

	expectation := &CurrencyRateCacheMockGetActualRateExpectation{
		mock:   mmGetActualRate.mock,
		params: &CurrencyRateCacheMockGetActualRateParams{ctx, ts, currency},
	}
	mmGetActualRate.expectations = append(mmGetActualRate.expectations, expectation)
	return expectation
}

// Then sets up CurrencyRateCache.GetActualRate return parameters for the expectation previously defined by the When method
func (e *CurrencyRateCacheMockGetActualRateExpectation) Then(rate finance_models.CurrencyRate, exists bool, err error) *CurrencyRateCacheMock {
	e.results = &CurrencyRateCacheMockGetActualRateResults{rate, exists, err}
	return e.mock
}

// GetActualRate implements finance_services_currency.CurrencyRateCache
func (mmGetActualRate *CurrencyRateCacheMock) GetActualRate(ctx context.Context, ts tr.Transaction, currency finance_models.Currency) (rate finance_models.CurrencyRate, exists bool, err error) {
	mm_atomic.AddUint64(&mmGetActualRate.beforeGetActualRateCounter, 1)
	defer mm_atomic.AddUint64(&mmGetActualRate.afterGetActualRateCounter, 1)

	if mmGetActualRate.inspectFuncGetActualRate != nil {
		mmGetActualRate.inspectFuncGetActualRate(ctx, ts, currency)
	}

	mm_params := &CurrencyRateCacheMockGetActualRateParams{ctx, ts, currency}

	// Record call args
	mmGetActualRate.GetActualRateMock.mutex.Lock()
	mmGetActualRate.GetActualRateMock.callArgs = append(mmGetActualRate.GetActualRateMock.callArgs, mm_params)
	mmGetActualRate.GetActualRateMock.mutex.Unlock()

	for _, e := range mmGetActualRate.GetActualRateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rate, e.results.exists, e.results.err
		}
	}

	if mmGetActualRate.GetActualRateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetActualRate.GetActualRateMock.defaultExpectation.Counter, 1)
		mm_want := mmGetActualRate.GetActualRateMock.defaultExpectation.params
		mm_got := CurrencyRateCacheMockGetActualRateParams{ctx, ts, currency}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetActualRate.t.Errorf("CurrencyRateCacheMock.GetActualRate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetActualRate.GetActualRateMock.defaultExpectation.results
		if mm_results == nil {
			mmGetActualRate.t.Fatal("No results are set for the CurrencyRateCacheMock.GetActualRate")
		}
		return (*mm_results).rate, (*mm_results).exists, (*mm_results).err
	}
	if mmGetActualRate.funcGetActualRate != nil {
		return mmGetActualRate.funcGetActualRate(ctx, ts, currency)
	}
	mmGetActualRate.t.Fatalf("Unexpected call to CurrencyRateCacheMock.GetActualRate. %v %v %v", ctx, ts, currency)
	return
}

// GetActualRateAfterCounter returns a count of finished CurrencyRateCacheMock.GetActualRate invocations
func (mmGetActualRate *CurrencyRateCacheMock) GetActualRateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetActualRate.afterGetActualRateCounter)
}

// GetActualRateBeforeCounter returns a count of CurrencyRateCacheMock.GetActualRate invocations
func (mmGetActualRate *CurrencyRateCacheMock) GetActualRateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetActualRate.beforeGetActualRateCounter)
}

// Calls returns a list of arguments used in each call to CurrencyRateCacheMock.GetActualRate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetActualRate *mCurrencyRateCacheMockGetActualRate) Calls() []*CurrencyRateCacheMockGetActualRateParams {
	mmGetActualRate.mutex.RLock()

	argCopy := make([]*CurrencyRateCacheMockGetActualRateParams, len(mmGetActualRate.callArgs))
	copy(argCopy, mmGetActualRate.callArgs)

	mmGetActualRate.mutex.RUnlock()

	return argCopy
}

// MinimockGetActualRateDone returns true if the count of the GetActualRate invocations corresponds
// the number of defined expectations
func (m *CurrencyRateCacheMock) MinimockGetActualRateDone() bool {
	for _, e := range m.GetActualRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetActualRateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetActualRateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetActualRate != nil && mm_atomic.LoadUint64(&m.afterGetActualRateCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetActualRateInspect logs each unmet expectation
func (m *CurrencyRateCacheMock) MinimockGetActualRateInspect() {
	for _, e := range m.GetActualRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CurrencyRateCacheMock.GetActualRate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetActualRateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetActualRateCounter) < 1 {
		if m.GetActualRateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CurrencyRateCacheMock.GetActualRate")
		} else {
			m.t.Errorf("Expected call to CurrencyRateCacheMock.GetActualRate with params: %#v", *m.GetActualRateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetActualRate != nil && mm_atomic.LoadUint64(&m.afterGetActualRateCounter) < 1 {
		m.t.Error("Expected call to CurrencyRateCacheMock.GetActualRate")
	}
}

type mCurrencyRateCacheMockUpdate struct {
	mock               *CurrencyRateCacheMock
	defaultExpectation *CurrencyRateCacheMockUpdateExpectation
	expectations       []*CurrencyRateCacheMockUpdateExpectation

	callArgs []*CurrencyRateCacheMockUpdateParams
	mutex    sync.RWMutex
}

// CurrencyRateCacheMockUpdateExpectation specifies expectation struct of the CurrencyRateCache.Update
type CurrencyRateCacheMockUpdateExpectation struct {
	mock    *CurrencyRateCacheMock
	params  *CurrencyRateCacheMockUpdateParams
	results *CurrencyRateCacheMockUpdateResults
	Counter uint64
}

// CurrencyRateCacheMockUpdateParams contains parameters of the CurrencyRateCache.Update
type CurrencyRateCacheMockUpdateParams struct {
	ctx  context.Context
	ts   tr.Transaction
	rate finance_models.CurrencyRate
}

// CurrencyRateCacheMockUpdateResults contains results of the CurrencyRateCache.Update
type CurrencyRateCacheMockUpdateResults struct {
	err error
}

// Expect sets up expected params for CurrencyRateCache.Update
func (mmUpdate *mCurrencyRateCacheMockUpdate) Expect(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate) *mCurrencyRateCacheMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CurrencyRateCacheMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CurrencyRateCacheMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &CurrencyRateCacheMockUpdateParams{ctx, ts, rate}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the CurrencyRateCache.Update
func (mmUpdate *mCurrencyRateCacheMockUpdate) Inspect(f func(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate)) *mCurrencyRateCacheMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for CurrencyRateCacheMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by CurrencyRateCache.Update
func (mmUpdate *mCurrencyRateCacheMockUpdate) Return(err error) *CurrencyRateCacheMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CurrencyRateCacheMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CurrencyRateCacheMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &CurrencyRateCacheMockUpdateResults{err}
	return mmUpdate.mock
}

//Set uses given function f to mock the CurrencyRateCache.Update method
func (mmUpdate *mCurrencyRateCacheMockUpdate) Set(f func(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate) (err error)) *CurrencyRateCacheMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the CurrencyRateCache.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the CurrencyRateCache.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the CurrencyRateCache.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mCurrencyRateCacheMockUpdate) When(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate) *CurrencyRateCacheMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CurrencyRateCacheMock.Update mock is already set by Set")
	}

	expectation := &CurrencyRateCacheMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &CurrencyRateCacheMockUpdateParams{ctx, ts, rate},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up CurrencyRateCache.Update return parameters for the expectation previously defined by the When method
func (e *CurrencyRateCacheMockUpdateExpectation) Then(err error) *CurrencyRateCacheMock {
	e.results = &CurrencyRateCacheMockUpdateResults{err}
	return e.mock
}

// Update implements finance_services_currency.CurrencyRateCache
func (mmUpdate *CurrencyRateCacheMock) Update(ctx context.Context, ts tr.Transaction, rate finance_models.CurrencyRate) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, ts, rate)
	}

	mm_params := &CurrencyRateCacheMockUpdateParams{ctx, ts, rate}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := CurrencyRateCacheMockUpdateParams{ctx, ts, rate}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("CurrencyRateCacheMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the CurrencyRateCacheMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, ts, rate)
	}
	mmUpdate.t.Fatalf("Unexpected call to CurrencyRateCacheMock.Update. %v %v %v", ctx, ts, rate)
	return
}

// UpdateAfterCounter returns a count of finished CurrencyRateCacheMock.Update invocations
func (mmUpdate *CurrencyRateCacheMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of CurrencyRateCacheMock.Update invocations
func (mmUpdate *CurrencyRateCacheMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to CurrencyRateCacheMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mCurrencyRateCacheMockUpdate) Calls() []*CurrencyRateCacheMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*CurrencyRateCacheMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *CurrencyRateCacheMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *CurrencyRateCacheMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CurrencyRateCacheMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CurrencyRateCacheMock.Update")
		} else {
			m.t.Errorf("Expected call to CurrencyRateCacheMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to CurrencyRateCacheMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CurrencyRateCacheMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetActualRateInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CurrencyRateCacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CurrencyRateCacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetActualRateDone() &&
		m.MinimockUpdateDone()
}
