package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/services/currency/rates.CurrencyRateLoader -o ./mocks\currency_rate_loader.go -n CurrencyRateLoaderMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/shopspring/decimal"
	finance_models "github.com/shav/telegram-bot/internal/modules/finances/domain/models"
)

// CurrencyRateLoaderMock implements finance_services_currency.CurrencyRateLoader
type CurrencyRateLoaderMock struct {
	t minimock.Tester

	funcLoadRate          func(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency) (d1 decimal.Decimal, err error)
	inspectFuncLoadRate   func(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency)
	afterLoadRateCounter  uint64
	beforeLoadRateCounter uint64
	LoadRateMock          mCurrencyRateLoaderMockLoadRate
}

// NewCurrencyRateLoaderMock returns a mock for finance_services_currency.CurrencyRateLoader
func NewCurrencyRateLoaderMock(t minimock.Tester) *CurrencyRateLoaderMock {
	m := &CurrencyRateLoaderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LoadRateMock = mCurrencyRateLoaderMockLoadRate{mock: m}
	m.LoadRateMock.callArgs = []*CurrencyRateLoaderMockLoadRateParams{}

	return m
}

type mCurrencyRateLoaderMockLoadRate struct {
	mock               *CurrencyRateLoaderMock
	defaultExpectation *CurrencyRateLoaderMockLoadRateExpectation
	expectations       []*CurrencyRateLoaderMockLoadRateExpectation

	callArgs []*CurrencyRateLoaderMockLoadRateParams
	mutex    sync.RWMutex
}

// CurrencyRateLoaderMockLoadRateExpectation specifies expectation struct of the CurrencyRateLoader.LoadRate
type CurrencyRateLoaderMockLoadRateExpectation struct {
	mock    *CurrencyRateLoaderMock
	params  *CurrencyRateLoaderMockLoadRateParams
	results *CurrencyRateLoaderMockLoadRateResults
	Counter uint64
}

// CurrencyRateLoaderMockLoadRateParams contains parameters of the CurrencyRateLoader.LoadRate
type CurrencyRateLoaderMockLoadRateParams struct {
	ctx            context.Context
	baseCurrency   finance_models.Currency
	targetCurrency finance_models.Currency
}

// CurrencyRateLoaderMockLoadRateResults contains results of the CurrencyRateLoader.LoadRate
type CurrencyRateLoaderMockLoadRateResults struct {
	d1  decimal.Decimal
	err error
}

// Expect sets up expected params for CurrencyRateLoader.LoadRate
func (mmLoadRate *mCurrencyRateLoaderMockLoadRate) Expect(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency) *mCurrencyRateLoaderMockLoadRate {
	if mmLoadRate.mock.funcLoadRate != nil {
		mmLoadRate.mock.t.Fatalf("CurrencyRateLoaderMock.LoadRate mock is already set by Set")
	}

	if mmLoadRate.defaultExpectation == nil {
		mmLoadRate.defaultExpectation = &CurrencyRateLoaderMockLoadRateExpectation{}
	}

	mmLoadRate.defaultExpectation.params = &CurrencyRateLoaderMockLoadRateParams{ctx, baseCurrency, targetCurrency}
	for _, e := range mmLoadRate.expectations {
		if minimock.Equal(e.params, mmLoadRate.defaultExpectation.params) {
			mmLoadRate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLoadRate.defaultExpectation.params)
		}
	}

	return mmLoadRate
}

// Inspect accepts an inspector function that has same arguments as the CurrencyRateLoader.LoadRate
func (mmLoadRate *mCurrencyRateLoaderMockLoadRate) Inspect(f func(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency)) *mCurrencyRateLoaderMockLoadRate {
	if mmLoadRate.mock.inspectFuncLoadRate != nil {
		mmLoadRate.mock.t.Fatalf("Inspect function is already set for CurrencyRateLoaderMock.LoadRate")
	}

	mmLoadRate.mock.inspectFuncLoadRate = f

	return mmLoadRate
}

// Return sets up results that will be returned by CurrencyRateLoader.LoadRate
func (mmLoadRate *mCurrencyRateLoaderMockLoadRate) Return(d1 decimal.Decimal, err error) *CurrencyRateLoaderMock {
	if mmLoadRate.mock.funcLoadRate != nil {
		mmLoadRate.mock.t.Fatalf("CurrencyRateLoaderMock.LoadRate mock is already set by Set")
	}

	if mmLoadRate.defaultExpectation == nil {
		mmLoadRate.defaultExpectation = &CurrencyRateLoaderMockLoadRateExpectation{mock: mmLoadRate.mock}
	}
	mmLoadRate.defaultExpectation.results = &CurrencyRateLoaderMockLoadRateResults{d1, err}
	return mmLoadRate.mock
}

//Set uses given function f to mock the CurrencyRateLoader.LoadRate method
func (mmLoadRate *mCurrencyRateLoaderMockLoadRate) Set(f func(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency) (d1 decimal.Decimal, err error)) *CurrencyRateLoaderMock {
	if mmLoadRate.defaultExpectation != nil {
		mmLoadRate.mock.t.Fatalf("Default expectation is already set for the CurrencyRateLoader.LoadRate method")
	}

	if len(mmLoadRate.expectations) > 0 {
		mmLoadRate.mock.t.Fatalf("Some expectations are already set for the CurrencyRateLoader.LoadRate method")
	}

	mmLoadRate.mock.funcLoadRate = f
	return mmLoadRate.mock
}

// When sets expectation for the CurrencyRateLoader.LoadRate which will trigger the result defined by the following
// Then helper
func (mmLoadRate *mCurrencyRateLoaderMockLoadRate) When(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency) *CurrencyRateLoaderMockLoadRateExpectation {
	if mmLoadRate.mock.funcLoadRate != nil {
		mmLoadRate.mock.t.Fatalf("CurrencyRateLoaderMock.LoadRate mock is already set by Set")
	}

	expectation := &CurrencyRateLoaderMockLoadRateExpectation{
		mock:   mmLoadRate.mock,
		params: &CurrencyRateLoaderMockLoadRateParams{ctx, baseCurrency, targetCurrency},
	}
	mmLoadRate.expectations = append(mmLoadRate.expectations, expectation)
	return expectation
}

// Then sets up CurrencyRateLoader.LoadRate return parameters for the expectation previously defined by the When method
func (e *CurrencyRateLoaderMockLoadRateExpectation) Then(d1 decimal.Decimal, err error) *CurrencyRateLoaderMock {
	e.results = &CurrencyRateLoaderMockLoadRateResults{d1, err}
	return e.mock
}

// LoadRate implements finance_services_currency.CurrencyRateLoader
func (mmLoadRate *CurrencyRateLoaderMock) LoadRate(ctx context.Context, baseCurrency finance_models.Currency, targetCurrency finance_models.Currency) (d1 decimal.Decimal, err error) {
	mm_atomic.AddUint64(&mmLoadRate.beforeLoadRateCounter, 1)
	defer mm_atomic.AddUint64(&mmLoadRate.afterLoadRateCounter, 1)

	if mmLoadRate.inspectFuncLoadRate != nil {
		mmLoadRate.inspectFuncLoadRate(ctx, baseCurrency, targetCurrency)
	}

	mm_params := &CurrencyRateLoaderMockLoadRateParams{ctx, baseCurrency, targetCurrency}

	// Record call args
	mmLoadRate.LoadRateMock.mutex.Lock()
	mmLoadRate.LoadRateMock.callArgs = append(mmLoadRate.LoadRateMock.callArgs, mm_params)
	mmLoadRate.LoadRateMock.mutex.Unlock()

	for _, e := range mmLoadRate.LoadRateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.err
		}
	}

	if mmLoadRate.LoadRateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLoadRate.LoadRateMock.defaultExpectation.Counter, 1)
		mm_want := mmLoadRate.LoadRateMock.defaultExpectation.params
		mm_got := CurrencyRateLoaderMockLoadRateParams{ctx, baseCurrency, targetCurrency}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLoadRate.t.Errorf("CurrencyRateLoaderMock.LoadRate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLoadRate.LoadRateMock.defaultExpectation.results
		if mm_results == nil {
			mmLoadRate.t.Fatal("No results are set for the CurrencyRateLoaderMock.LoadRate")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmLoadRate.funcLoadRate != nil {
		return mmLoadRate.funcLoadRate(ctx, baseCurrency, targetCurrency)
	}
	mmLoadRate.t.Fatalf("Unexpected call to CurrencyRateLoaderMock.LoadRate. %v %v %v", ctx, baseCurrency, targetCurrency)
	return
}

// LoadRateAfterCounter returns a count of finished CurrencyRateLoaderMock.LoadRate invocations
func (mmLoadRate *CurrencyRateLoaderMock) LoadRateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoadRate.afterLoadRateCounter)
}

// LoadRateBeforeCounter returns a count of CurrencyRateLoaderMock.LoadRate invocations
func (mmLoadRate *CurrencyRateLoaderMock) LoadRateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoadRate.beforeLoadRateCounter)
}

// Calls returns a list of arguments used in each call to CurrencyRateLoaderMock.LoadRate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLoadRate *mCurrencyRateLoaderMockLoadRate) Calls() []*CurrencyRateLoaderMockLoadRateParams {
	mmLoadRate.mutex.RLock()

	argCopy := make([]*CurrencyRateLoaderMockLoadRateParams, len(mmLoadRate.callArgs))
	copy(argCopy, mmLoadRate.callArgs)

	mmLoadRate.mutex.RUnlock()

	return argCopy
}

// MinimockLoadRateDone returns true if the count of the LoadRate invocations corresponds
// the number of defined expectations
func (m *CurrencyRateLoaderMock) MinimockLoadRateDone() bool {
	for _, e := range m.LoadRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadRateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadRateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoadRate != nil && mm_atomic.LoadUint64(&m.afterLoadRateCounter) < 1 {
		return false
	}
	return true
}

// MinimockLoadRateInspect logs each unmet expectation
func (m *CurrencyRateLoaderMock) MinimockLoadRateInspect() {
	for _, e := range m.LoadRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CurrencyRateLoaderMock.LoadRate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadRateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadRateCounter) < 1 {
		if m.LoadRateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CurrencyRateLoaderMock.LoadRate")
		} else {
			m.t.Errorf("Expected call to CurrencyRateLoaderMock.LoadRate with params: %#v", *m.LoadRateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoadRate != nil && mm_atomic.LoadUint64(&m.afterLoadRateCounter) < 1 {
		m.t.Error("Expected call to CurrencyRateLoaderMock.LoadRate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CurrencyRateLoaderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockLoadRateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CurrencyRateLoaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CurrencyRateLoaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLoadRateDone()
}
