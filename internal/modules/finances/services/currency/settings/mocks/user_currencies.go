package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/services/currency/settings.userCurrencies -o ./mocks\user_currencies.go -n UserCurrenciesMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	tr "github.com/shav/telegram-bot/internal/common/transactions"
	finance_models "github.com/shav/telegram-bot/internal/modules/finances/domain/models"
)

// UserCurrenciesMock implements finance_services_currency.userCurrencies
type UserCurrenciesMock struct {
	t minimock.Tester

	funcChangeCurrency          func(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency) (err error)
	inspectFuncChangeCurrency   func(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency)
	afterChangeCurrencyCounter  uint64
	beforeChangeCurrencyCounter uint64
	ChangeCurrencyMock          mUserCurrenciesMockChangeCurrency

	funcGetCurrency          func(ctx context.Context, ts tr.Transaction, userId int64) (currency finance_models.Currency, exists bool, err error)
	inspectFuncGetCurrency   func(ctx context.Context, ts tr.Transaction, userId int64)
	afterGetCurrencyCounter  uint64
	beforeGetCurrencyCounter uint64
	GetCurrencyMock          mUserCurrenciesMockGetCurrency
}

// NewUserCurrenciesMock returns a mock for finance_services_currency.userCurrencies
func NewUserCurrenciesMock(t minimock.Tester) *UserCurrenciesMock {
	m := &UserCurrenciesMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChangeCurrencyMock = mUserCurrenciesMockChangeCurrency{mock: m}
	m.ChangeCurrencyMock.callArgs = []*UserCurrenciesMockChangeCurrencyParams{}

	m.GetCurrencyMock = mUserCurrenciesMockGetCurrency{mock: m}
	m.GetCurrencyMock.callArgs = []*UserCurrenciesMockGetCurrencyParams{}

	return m
}

type mUserCurrenciesMockChangeCurrency struct {
	mock               *UserCurrenciesMock
	defaultExpectation *UserCurrenciesMockChangeCurrencyExpectation
	expectations       []*UserCurrenciesMockChangeCurrencyExpectation

	callArgs []*UserCurrenciesMockChangeCurrencyParams
	mutex    sync.RWMutex
}

// UserCurrenciesMockChangeCurrencyExpectation specifies expectation struct of the userCurrencies.ChangeCurrency
type UserCurrenciesMockChangeCurrencyExpectation struct {
	mock    *UserCurrenciesMock
	params  *UserCurrenciesMockChangeCurrencyParams
	results *UserCurrenciesMockChangeCurrencyResults
	Counter uint64
}

// UserCurrenciesMockChangeCurrencyParams contains parameters of the userCurrencies.ChangeCurrency
type UserCurrenciesMockChangeCurrencyParams struct {
	ctx         context.Context
	ts          tr.Transaction
	userId      int64
	newCurrency finance_models.Currency
}

// UserCurrenciesMockChangeCurrencyResults contains results of the userCurrencies.ChangeCurrency
type UserCurrenciesMockChangeCurrencyResults struct {
	err error
}

// Expect sets up expected params for userCurrencies.ChangeCurrency
func (mmChangeCurrency *mUserCurrenciesMockChangeCurrency) Expect(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency) *mUserCurrenciesMockChangeCurrency {
	if mmChangeCurrency.mock.funcChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("UserCurrenciesMock.ChangeCurrency mock is already set by Set")
	}

	if mmChangeCurrency.defaultExpectation == nil {
		mmChangeCurrency.defaultExpectation = &UserCurrenciesMockChangeCurrencyExpectation{}
	}

	mmChangeCurrency.defaultExpectation.params = &UserCurrenciesMockChangeCurrencyParams{ctx, ts, userId, newCurrency}
	for _, e := range mmChangeCurrency.expectations {
		if minimock.Equal(e.params, mmChangeCurrency.defaultExpectation.params) {
			mmChangeCurrency.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChangeCurrency.defaultExpectation.params)
		}
	}

	return mmChangeCurrency
}

// Inspect accepts an inspector function that has same arguments as the userCurrencies.ChangeCurrency
func (mmChangeCurrency *mUserCurrenciesMockChangeCurrency) Inspect(f func(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency)) *mUserCurrenciesMockChangeCurrency {
	if mmChangeCurrency.mock.inspectFuncChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("Inspect function is already set for UserCurrenciesMock.ChangeCurrency")
	}

	mmChangeCurrency.mock.inspectFuncChangeCurrency = f

	return mmChangeCurrency
}

// Return sets up results that will be returned by userCurrencies.ChangeCurrency
func (mmChangeCurrency *mUserCurrenciesMockChangeCurrency) Return(err error) *UserCurrenciesMock {
	if mmChangeCurrency.mock.funcChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("UserCurrenciesMock.ChangeCurrency mock is already set by Set")
	}

	if mmChangeCurrency.defaultExpectation == nil {
		mmChangeCurrency.defaultExpectation = &UserCurrenciesMockChangeCurrencyExpectation{mock: mmChangeCurrency.mock}
	}
	mmChangeCurrency.defaultExpectation.results = &UserCurrenciesMockChangeCurrencyResults{err}
	return mmChangeCurrency.mock
}

//Set uses given function f to mock the userCurrencies.ChangeCurrency method
func (mmChangeCurrency *mUserCurrenciesMockChangeCurrency) Set(f func(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency) (err error)) *UserCurrenciesMock {
	if mmChangeCurrency.defaultExpectation != nil {
		mmChangeCurrency.mock.t.Fatalf("Default expectation is already set for the userCurrencies.ChangeCurrency method")
	}

	if len(mmChangeCurrency.expectations) > 0 {
		mmChangeCurrency.mock.t.Fatalf("Some expectations are already set for the userCurrencies.ChangeCurrency method")
	}

	mmChangeCurrency.mock.funcChangeCurrency = f
	return mmChangeCurrency.mock
}

// When sets expectation for the userCurrencies.ChangeCurrency which will trigger the result defined by the following
// Then helper
func (mmChangeCurrency *mUserCurrenciesMockChangeCurrency) When(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency) *UserCurrenciesMockChangeCurrencyExpectation {
	if mmChangeCurrency.mock.funcChangeCurrency != nil {
		mmChangeCurrency.mock.t.Fatalf("UserCurrenciesMock.ChangeCurrency mock is already set by Set")
	}

	expectation := &UserCurrenciesMockChangeCurrencyExpectation{
		mock:   mmChangeCurrency.mock,
		params: &UserCurrenciesMockChangeCurrencyParams{ctx, ts, userId, newCurrency},
	}
	mmChangeCurrency.expectations = append(mmChangeCurrency.expectations, expectation)
	return expectation
}

// Then sets up userCurrencies.ChangeCurrency return parameters for the expectation previously defined by the When method
func (e *UserCurrenciesMockChangeCurrencyExpectation) Then(err error) *UserCurrenciesMock {
	e.results = &UserCurrenciesMockChangeCurrencyResults{err}
	return e.mock
}

// ChangeCurrency implements finance_services_currency.userCurrencies
func (mmChangeCurrency *UserCurrenciesMock) ChangeCurrency(ctx context.Context, ts tr.Transaction, userId int64, newCurrency finance_models.Currency) (err error) {
	mm_atomic.AddUint64(&mmChangeCurrency.beforeChangeCurrencyCounter, 1)
	defer mm_atomic.AddUint64(&mmChangeCurrency.afterChangeCurrencyCounter, 1)

	if mmChangeCurrency.inspectFuncChangeCurrency != nil {
		mmChangeCurrency.inspectFuncChangeCurrency(ctx, ts, userId, newCurrency)
	}

	mm_params := &UserCurrenciesMockChangeCurrencyParams{ctx, ts, userId, newCurrency}

	// Record call args
	mmChangeCurrency.ChangeCurrencyMock.mutex.Lock()
	mmChangeCurrency.ChangeCurrencyMock.callArgs = append(mmChangeCurrency.ChangeCurrencyMock.callArgs, mm_params)
	mmChangeCurrency.ChangeCurrencyMock.mutex.Unlock()

	for _, e := range mmChangeCurrency.ChangeCurrencyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmChangeCurrency.ChangeCurrencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChangeCurrency.ChangeCurrencyMock.defaultExpectation.Counter, 1)
		mm_want := mmChangeCurrency.ChangeCurrencyMock.defaultExpectation.params
		mm_got := UserCurrenciesMockChangeCurrencyParams{ctx, ts, userId, newCurrency}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChangeCurrency.t.Errorf("UserCurrenciesMock.ChangeCurrency got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChangeCurrency.ChangeCurrencyMock.defaultExpectation.results
		if mm_results == nil {
			mmChangeCurrency.t.Fatal("No results are set for the UserCurrenciesMock.ChangeCurrency")
		}
		return (*mm_results).err
	}
	if mmChangeCurrency.funcChangeCurrency != nil {
		return mmChangeCurrency.funcChangeCurrency(ctx, ts, userId, newCurrency)
	}
	mmChangeCurrency.t.Fatalf("Unexpected call to UserCurrenciesMock.ChangeCurrency. %v %v %v %v", ctx, ts, userId, newCurrency)
	return
}

// ChangeCurrencyAfterCounter returns a count of finished UserCurrenciesMock.ChangeCurrency invocations
func (mmChangeCurrency *UserCurrenciesMock) ChangeCurrencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChangeCurrency.afterChangeCurrencyCounter)
}

// ChangeCurrencyBeforeCounter returns a count of UserCurrenciesMock.ChangeCurrency invocations
func (mmChangeCurrency *UserCurrenciesMock) ChangeCurrencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChangeCurrency.beforeChangeCurrencyCounter)
}

// Calls returns a list of arguments used in each call to UserCurrenciesMock.ChangeCurrency.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChangeCurrency *mUserCurrenciesMockChangeCurrency) Calls() []*UserCurrenciesMockChangeCurrencyParams {
	mmChangeCurrency.mutex.RLock()

	argCopy := make([]*UserCurrenciesMockChangeCurrencyParams, len(mmChangeCurrency.callArgs))
	copy(argCopy, mmChangeCurrency.callArgs)

	mmChangeCurrency.mutex.RUnlock()

	return argCopy
}

// MinimockChangeCurrencyDone returns true if the count of the ChangeCurrency invocations corresponds
// the number of defined expectations
func (m *UserCurrenciesMock) MinimockChangeCurrencyDone() bool {
	for _, e := range m.ChangeCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChangeCurrency != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockChangeCurrencyInspect logs each unmet expectation
func (m *UserCurrenciesMock) MinimockChangeCurrencyInspect() {
	for _, e := range m.ChangeCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCurrenciesMock.ChangeCurrency with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		if m.ChangeCurrencyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCurrenciesMock.ChangeCurrency")
		} else {
			m.t.Errorf("Expected call to UserCurrenciesMock.ChangeCurrency with params: %#v", *m.ChangeCurrencyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChangeCurrency != nil && mm_atomic.LoadUint64(&m.afterChangeCurrencyCounter) < 1 {
		m.t.Error("Expected call to UserCurrenciesMock.ChangeCurrency")
	}
}

type mUserCurrenciesMockGetCurrency struct {
	mock               *UserCurrenciesMock
	defaultExpectation *UserCurrenciesMockGetCurrencyExpectation
	expectations       []*UserCurrenciesMockGetCurrencyExpectation

	callArgs []*UserCurrenciesMockGetCurrencyParams
	mutex    sync.RWMutex
}

// UserCurrenciesMockGetCurrencyExpectation specifies expectation struct of the userCurrencies.GetCurrency
type UserCurrenciesMockGetCurrencyExpectation struct {
	mock    *UserCurrenciesMock
	params  *UserCurrenciesMockGetCurrencyParams
	results *UserCurrenciesMockGetCurrencyResults
	Counter uint64
}

// UserCurrenciesMockGetCurrencyParams contains parameters of the userCurrencies.GetCurrency
type UserCurrenciesMockGetCurrencyParams struct {
	ctx    context.Context
	ts     tr.Transaction
	userId int64
}

// UserCurrenciesMockGetCurrencyResults contains results of the userCurrencies.GetCurrency
type UserCurrenciesMockGetCurrencyResults struct {
	currency finance_models.Currency
	exists   bool
	err      error
}

// Expect sets up expected params for userCurrencies.GetCurrency
func (mmGetCurrency *mUserCurrenciesMockGetCurrency) Expect(ctx context.Context, ts tr.Transaction, userId int64) *mUserCurrenciesMockGetCurrency {
	if mmGetCurrency.mock.funcGetCurrency != nil {
		mmGetCurrency.mock.t.Fatalf("UserCurrenciesMock.GetCurrency mock is already set by Set")
	}

	if mmGetCurrency.defaultExpectation == nil {
		mmGetCurrency.defaultExpectation = &UserCurrenciesMockGetCurrencyExpectation{}
	}

	mmGetCurrency.defaultExpectation.params = &UserCurrenciesMockGetCurrencyParams{ctx, ts, userId}
	for _, e := range mmGetCurrency.expectations {
		if minimock.Equal(e.params, mmGetCurrency.defaultExpectation.params) {
			mmGetCurrency.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCurrency.defaultExpectation.params)
		}
	}

	return mmGetCurrency
}

// Inspect accepts an inspector function that has same arguments as the userCurrencies.GetCurrency
func (mmGetCurrency *mUserCurrenciesMockGetCurrency) Inspect(f func(ctx context.Context, ts tr.Transaction, userId int64)) *mUserCurrenciesMockGetCurrency {
	if mmGetCurrency.mock.inspectFuncGetCurrency != nil {
		mmGetCurrency.mock.t.Fatalf("Inspect function is already set for UserCurrenciesMock.GetCurrency")
	}

	mmGetCurrency.mock.inspectFuncGetCurrency = f

	return mmGetCurrency
}

// Return sets up results that will be returned by userCurrencies.GetCurrency
func (mmGetCurrency *mUserCurrenciesMockGetCurrency) Return(currency finance_models.Currency, exists bool, err error) *UserCurrenciesMock {
	if mmGetCurrency.mock.funcGetCurrency != nil {
		mmGetCurrency.mock.t.Fatalf("UserCurrenciesMock.GetCurrency mock is already set by Set")
	}

	if mmGetCurrency.defaultExpectation == nil {
		mmGetCurrency.defaultExpectation = &UserCurrenciesMockGetCurrencyExpectation{mock: mmGetCurrency.mock}
	}
	mmGetCurrency.defaultExpectation.results = &UserCurrenciesMockGetCurrencyResults{currency, exists, err}
	return mmGetCurrency.mock
}

//Set uses given function f to mock the userCurrencies.GetCurrency method
func (mmGetCurrency *mUserCurrenciesMockGetCurrency) Set(f func(ctx context.Context, ts tr.Transaction, userId int64) (currency finance_models.Currency, exists bool, err error)) *UserCurrenciesMock {
	if mmGetCurrency.defaultExpectation != nil {
		mmGetCurrency.mock.t.Fatalf("Default expectation is already set for the userCurrencies.GetCurrency method")
	}

	if len(mmGetCurrency.expectations) > 0 {
		mmGetCurrency.mock.t.Fatalf("Some expectations are already set for the userCurrencies.GetCurrency method")
	}

	mmGetCurrency.mock.funcGetCurrency = f
	return mmGetCurrency.mock
}

// When sets expectation for the userCurrencies.GetCurrency which will trigger the result defined by the following
// Then helper
func (mmGetCurrency *mUserCurrenciesMockGetCurrency) When(ctx context.Context, ts tr.Transaction, userId int64) *UserCurrenciesMockGetCurrencyExpectation {
	if mmGetCurrency.mock.funcGetCurrency != nil {
		mmGetCurrency.mock.t.Fatalf("UserCurrenciesMock.GetCurrency mock is already set by Set")
	}

	expectation := &UserCurrenciesMockGetCurrencyExpectation{
		mock:   mmGetCurrency.mock,
		params: &UserCurrenciesMockGetCurrencyParams{ctx, ts, userId},
	}
	mmGetCurrency.expectations = append(mmGetCurrency.expectations, expectation)
	return expectation
}

// Then sets up userCurrencies.GetCurrency return parameters for the expectation previously defined by the When method
func (e *UserCurrenciesMockGetCurrencyExpectation) Then(currency finance_models.Currency, exists bool, err error) *UserCurrenciesMock {
	e.results = &UserCurrenciesMockGetCurrencyResults{currency, exists, err}
	return e.mock
}

// GetCurrency implements finance_services_currency.userCurrencies
func (mmGetCurrency *UserCurrenciesMock) GetCurrency(ctx context.Context, ts tr.Transaction, userId int64) (currency finance_models.Currency, exists bool, err error) {
	mm_atomic.AddUint64(&mmGetCurrency.beforeGetCurrencyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCurrency.afterGetCurrencyCounter, 1)

	if mmGetCurrency.inspectFuncGetCurrency != nil {
		mmGetCurrency.inspectFuncGetCurrency(ctx, ts, userId)
	}

	mm_params := &UserCurrenciesMockGetCurrencyParams{ctx, ts, userId}

	// Record call args
	mmGetCurrency.GetCurrencyMock.mutex.Lock()
	mmGetCurrency.GetCurrencyMock.callArgs = append(mmGetCurrency.GetCurrencyMock.callArgs, mm_params)
	mmGetCurrency.GetCurrencyMock.mutex.Unlock()

	for _, e := range mmGetCurrency.GetCurrencyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.currency, e.results.exists, e.results.err
		}
	}

	if mmGetCurrency.GetCurrencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCurrency.GetCurrencyMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCurrency.GetCurrencyMock.defaultExpectation.params
		mm_got := UserCurrenciesMockGetCurrencyParams{ctx, ts, userId}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCurrency.t.Errorf("UserCurrenciesMock.GetCurrency got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCurrency.GetCurrencyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCurrency.t.Fatal("No results are set for the UserCurrenciesMock.GetCurrency")
		}
		return (*mm_results).currency, (*mm_results).exists, (*mm_results).err
	}
	if mmGetCurrency.funcGetCurrency != nil {
		return mmGetCurrency.funcGetCurrency(ctx, ts, userId)
	}
	mmGetCurrency.t.Fatalf("Unexpected call to UserCurrenciesMock.GetCurrency. %v %v %v", ctx, ts, userId)
	return
}

// GetCurrencyAfterCounter returns a count of finished UserCurrenciesMock.GetCurrency invocations
func (mmGetCurrency *UserCurrenciesMock) GetCurrencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrency.afterGetCurrencyCounter)
}

// GetCurrencyBeforeCounter returns a count of UserCurrenciesMock.GetCurrency invocations
func (mmGetCurrency *UserCurrenciesMock) GetCurrencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrency.beforeGetCurrencyCounter)
}

// Calls returns a list of arguments used in each call to UserCurrenciesMock.GetCurrency.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCurrency *mUserCurrenciesMockGetCurrency) Calls() []*UserCurrenciesMockGetCurrencyParams {
	mmGetCurrency.mutex.RLock()

	argCopy := make([]*UserCurrenciesMockGetCurrencyParams, len(mmGetCurrency.callArgs))
	copy(argCopy, mmGetCurrency.callArgs)

	mmGetCurrency.mutex.RUnlock()

	return argCopy
}

// MinimockGetCurrencyDone returns true if the count of the GetCurrency invocations corresponds
// the number of defined expectations
func (m *UserCurrenciesMock) MinimockGetCurrencyDone() bool {
	for _, e := range m.GetCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCurrencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrency != nil && mm_atomic.LoadUint64(&m.afterGetCurrencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCurrencyInspect logs each unmet expectation
func (m *UserCurrenciesMock) MinimockGetCurrencyInspect() {
	for _, e := range m.GetCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCurrenciesMock.GetCurrency with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCurrencyCounter) < 1 {
		if m.GetCurrencyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCurrenciesMock.GetCurrency")
		} else {
			m.t.Errorf("Expected call to UserCurrenciesMock.GetCurrency with params: %#v", *m.GetCurrencyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrency != nil && mm_atomic.LoadUint64(&m.afterGetCurrencyCounter) < 1 {
		m.t.Error("Expected call to UserCurrenciesMock.GetCurrency")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCurrenciesMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockChangeCurrencyInspect()

		m.MinimockGetCurrencyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCurrenciesMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCurrenciesMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChangeCurrencyDone() &&
		m.MinimockGetCurrencyDone()
}
