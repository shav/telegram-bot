package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/transport/message_queue/handlers.deserializer -o ./mocks\deserializer.go -n DeserializerMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// DeserializerMock implements finance_transport_mq_handlers.deserializer
type DeserializerMock struct {
	t minimock.Tester

	funcUnmarshal          func(serializedObj []byte, object any) (err error)
	inspectFuncUnmarshal   func(serializedObj []byte, object any)
	afterUnmarshalCounter  uint64
	beforeUnmarshalCounter uint64
	UnmarshalMock          mDeserializerMockUnmarshal
}

// NewDeserializerMock returns a mock for finance_transport_mq_handlers.deserializer
func NewDeserializerMock(t minimock.Tester) *DeserializerMock {
	m := &DeserializerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UnmarshalMock = mDeserializerMockUnmarshal{mock: m}
	m.UnmarshalMock.callArgs = []*DeserializerMockUnmarshalParams{}

	return m
}

type mDeserializerMockUnmarshal struct {
	mock               *DeserializerMock
	defaultExpectation *DeserializerMockUnmarshalExpectation
	expectations       []*DeserializerMockUnmarshalExpectation

	callArgs []*DeserializerMockUnmarshalParams
	mutex    sync.RWMutex
}

// DeserializerMockUnmarshalExpectation specifies expectation struct of the deserializer.Unmarshal
type DeserializerMockUnmarshalExpectation struct {
	mock    *DeserializerMock
	params  *DeserializerMockUnmarshalParams
	results *DeserializerMockUnmarshalResults
	Counter uint64
}

// DeserializerMockUnmarshalParams contains parameters of the deserializer.Unmarshal
type DeserializerMockUnmarshalParams struct {
	serializedObj []byte
	object        any
}

// DeserializerMockUnmarshalResults contains results of the deserializer.Unmarshal
type DeserializerMockUnmarshalResults struct {
	err error
}

// Expect sets up expected params for deserializer.Unmarshal
func (mmUnmarshal *mDeserializerMockUnmarshal) Expect(serializedObj []byte, object any) *mDeserializerMockUnmarshal {
	if mmUnmarshal.mock.funcUnmarshal != nil {
		mmUnmarshal.mock.t.Fatalf("DeserializerMock.Unmarshal mock is already set by Set")
	}

	if mmUnmarshal.defaultExpectation == nil {
		mmUnmarshal.defaultExpectation = &DeserializerMockUnmarshalExpectation{}
	}

	mmUnmarshal.defaultExpectation.params = &DeserializerMockUnmarshalParams{serializedObj, object}
	for _, e := range mmUnmarshal.expectations {
		if minimock.Equal(e.params, mmUnmarshal.defaultExpectation.params) {
			mmUnmarshal.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUnmarshal.defaultExpectation.params)
		}
	}

	return mmUnmarshal
}

// Inspect accepts an inspector function that has same arguments as the deserializer.Unmarshal
func (mmUnmarshal *mDeserializerMockUnmarshal) Inspect(f func(serializedObj []byte, object any)) *mDeserializerMockUnmarshal {
	if mmUnmarshal.mock.inspectFuncUnmarshal != nil {
		mmUnmarshal.mock.t.Fatalf("Inspect function is already set for DeserializerMock.Unmarshal")
	}

	mmUnmarshal.mock.inspectFuncUnmarshal = f

	return mmUnmarshal
}

// Return sets up results that will be returned by deserializer.Unmarshal
func (mmUnmarshal *mDeserializerMockUnmarshal) Return(err error) *DeserializerMock {
	if mmUnmarshal.mock.funcUnmarshal != nil {
		mmUnmarshal.mock.t.Fatalf("DeserializerMock.Unmarshal mock is already set by Set")
	}

	if mmUnmarshal.defaultExpectation == nil {
		mmUnmarshal.defaultExpectation = &DeserializerMockUnmarshalExpectation{mock: mmUnmarshal.mock}
	}
	mmUnmarshal.defaultExpectation.results = &DeserializerMockUnmarshalResults{err}
	return mmUnmarshal.mock
}

//Set uses given function f to mock the deserializer.Unmarshal method
func (mmUnmarshal *mDeserializerMockUnmarshal) Set(f func(serializedObj []byte, object any) (err error)) *DeserializerMock {
	if mmUnmarshal.defaultExpectation != nil {
		mmUnmarshal.mock.t.Fatalf("Default expectation is already set for the deserializer.Unmarshal method")
	}

	if len(mmUnmarshal.expectations) > 0 {
		mmUnmarshal.mock.t.Fatalf("Some expectations are already set for the deserializer.Unmarshal method")
	}

	mmUnmarshal.mock.funcUnmarshal = f
	return mmUnmarshal.mock
}

// When sets expectation for the deserializer.Unmarshal which will trigger the result defined by the following
// Then helper
func (mmUnmarshal *mDeserializerMockUnmarshal) When(serializedObj []byte, object any) *DeserializerMockUnmarshalExpectation {
	if mmUnmarshal.mock.funcUnmarshal != nil {
		mmUnmarshal.mock.t.Fatalf("DeserializerMock.Unmarshal mock is already set by Set")
	}

	expectation := &DeserializerMockUnmarshalExpectation{
		mock:   mmUnmarshal.mock,
		params: &DeserializerMockUnmarshalParams{serializedObj, object},
	}
	mmUnmarshal.expectations = append(mmUnmarshal.expectations, expectation)
	return expectation
}

// Then sets up deserializer.Unmarshal return parameters for the expectation previously defined by the When method
func (e *DeserializerMockUnmarshalExpectation) Then(err error) *DeserializerMock {
	e.results = &DeserializerMockUnmarshalResults{err}
	return e.mock
}

// Unmarshal implements finance_transport_mq_handlers.deserializer
func (mmUnmarshal *DeserializerMock) Unmarshal(serializedObj []byte, object any) (err error) {
	mm_atomic.AddUint64(&mmUnmarshal.beforeUnmarshalCounter, 1)
	defer mm_atomic.AddUint64(&mmUnmarshal.afterUnmarshalCounter, 1)

	if mmUnmarshal.inspectFuncUnmarshal != nil {
		mmUnmarshal.inspectFuncUnmarshal(serializedObj, object)
	}

	mm_params := &DeserializerMockUnmarshalParams{serializedObj, object}

	// Record call args
	mmUnmarshal.UnmarshalMock.mutex.Lock()
	mmUnmarshal.UnmarshalMock.callArgs = append(mmUnmarshal.UnmarshalMock.callArgs, mm_params)
	mmUnmarshal.UnmarshalMock.mutex.Unlock()

	for _, e := range mmUnmarshal.UnmarshalMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUnmarshal.UnmarshalMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUnmarshal.UnmarshalMock.defaultExpectation.Counter, 1)
		mm_want := mmUnmarshal.UnmarshalMock.defaultExpectation.params
		mm_got := DeserializerMockUnmarshalParams{serializedObj, object}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUnmarshal.t.Errorf("DeserializerMock.Unmarshal got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUnmarshal.UnmarshalMock.defaultExpectation.results
		if mm_results == nil {
			mmUnmarshal.t.Fatal("No results are set for the DeserializerMock.Unmarshal")
		}
		return (*mm_results).err
	}
	if mmUnmarshal.funcUnmarshal != nil {
		return mmUnmarshal.funcUnmarshal(serializedObj, object)
	}
	mmUnmarshal.t.Fatalf("Unexpected call to DeserializerMock.Unmarshal. %v %v", serializedObj, object)
	return
}

// UnmarshalAfterCounter returns a count of finished DeserializerMock.Unmarshal invocations
func (mmUnmarshal *DeserializerMock) UnmarshalAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnmarshal.afterUnmarshalCounter)
}

// UnmarshalBeforeCounter returns a count of DeserializerMock.Unmarshal invocations
func (mmUnmarshal *DeserializerMock) UnmarshalBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnmarshal.beforeUnmarshalCounter)
}

// Calls returns a list of arguments used in each call to DeserializerMock.Unmarshal.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUnmarshal *mDeserializerMockUnmarshal) Calls() []*DeserializerMockUnmarshalParams {
	mmUnmarshal.mutex.RLock()

	argCopy := make([]*DeserializerMockUnmarshalParams, len(mmUnmarshal.callArgs))
	copy(argCopy, mmUnmarshal.callArgs)

	mmUnmarshal.mutex.RUnlock()

	return argCopy
}

// MinimockUnmarshalDone returns true if the count of the Unmarshal invocations corresponds
// the number of defined expectations
func (m *DeserializerMock) MinimockUnmarshalDone() bool {
	for _, e := range m.UnmarshalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UnmarshalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUnmarshalCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnmarshal != nil && mm_atomic.LoadUint64(&m.afterUnmarshalCounter) < 1 {
		return false
	}
	return true
}

// MinimockUnmarshalInspect logs each unmet expectation
func (m *DeserializerMock) MinimockUnmarshalInspect() {
	for _, e := range m.UnmarshalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DeserializerMock.Unmarshal with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UnmarshalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUnmarshalCounter) < 1 {
		if m.UnmarshalMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DeserializerMock.Unmarshal")
		} else {
			m.t.Errorf("Expected call to DeserializerMock.Unmarshal with params: %#v", *m.UnmarshalMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnmarshal != nil && mm_atomic.LoadUint64(&m.afterUnmarshalCounter) < 1 {
		m.t.Error("Expected call to DeserializerMock.Unmarshal")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DeserializerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockUnmarshalInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DeserializerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DeserializerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUnmarshalDone()
}
