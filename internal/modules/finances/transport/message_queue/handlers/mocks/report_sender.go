package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/transport/message_queue/handlers.reportSender -o ./mocks\report_sender.go -n ReportSenderMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	core_models "github.com/shav/telegram-bot/internal/modules/core/domain/models"
)

// ReportSenderMock implements finance_transport_mq_handlers.reportSender
type ReportSenderMock struct {
	t minimock.Tester

	funcSendReport          func(ctx context.Context, userId int64, report core_models.Report) (err error)
	inspectFuncSendReport   func(ctx context.Context, userId int64, report core_models.Report)
	afterSendReportCounter  uint64
	beforeSendReportCounter uint64
	SendReportMock          mReportSenderMockSendReport
}

// NewReportSenderMock returns a mock for finance_transport_mq_handlers.reportSender
func NewReportSenderMock(t minimock.Tester) *ReportSenderMock {
	m := &ReportSenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendReportMock = mReportSenderMockSendReport{mock: m}
	m.SendReportMock.callArgs = []*ReportSenderMockSendReportParams{}

	return m
}

type mReportSenderMockSendReport struct {
	mock               *ReportSenderMock
	defaultExpectation *ReportSenderMockSendReportExpectation
	expectations       []*ReportSenderMockSendReportExpectation

	callArgs []*ReportSenderMockSendReportParams
	mutex    sync.RWMutex
}

// ReportSenderMockSendReportExpectation specifies expectation struct of the reportSender.SendReport
type ReportSenderMockSendReportExpectation struct {
	mock    *ReportSenderMock
	params  *ReportSenderMockSendReportParams
	results *ReportSenderMockSendReportResults
	Counter uint64
}

// ReportSenderMockSendReportParams contains parameters of the reportSender.SendReport
type ReportSenderMockSendReportParams struct {
	ctx    context.Context
	userId int64
	report core_models.Report
}

// ReportSenderMockSendReportResults contains results of the reportSender.SendReport
type ReportSenderMockSendReportResults struct {
	err error
}

// Expect sets up expected params for reportSender.SendReport
func (mmSendReport *mReportSenderMockSendReport) Expect(ctx context.Context, userId int64, report core_models.Report) *mReportSenderMockSendReport {
	if mmSendReport.mock.funcSendReport != nil {
		mmSendReport.mock.t.Fatalf("ReportSenderMock.SendReport mock is already set by Set")
	}

	if mmSendReport.defaultExpectation == nil {
		mmSendReport.defaultExpectation = &ReportSenderMockSendReportExpectation{}
	}

	mmSendReport.defaultExpectation.params = &ReportSenderMockSendReportParams{ctx, userId, report}
	for _, e := range mmSendReport.expectations {
		if minimock.Equal(e.params, mmSendReport.defaultExpectation.params) {
			mmSendReport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendReport.defaultExpectation.params)
		}
	}

	return mmSendReport
}

// Inspect accepts an inspector function that has same arguments as the reportSender.SendReport
func (mmSendReport *mReportSenderMockSendReport) Inspect(f func(ctx context.Context, userId int64, report core_models.Report)) *mReportSenderMockSendReport {
	if mmSendReport.mock.inspectFuncSendReport != nil {
		mmSendReport.mock.t.Fatalf("Inspect function is already set for ReportSenderMock.SendReport")
	}

	mmSendReport.mock.inspectFuncSendReport = f

	return mmSendReport
}

// Return sets up results that will be returned by reportSender.SendReport
func (mmSendReport *mReportSenderMockSendReport) Return(err error) *ReportSenderMock {
	if mmSendReport.mock.funcSendReport != nil {
		mmSendReport.mock.t.Fatalf("ReportSenderMock.SendReport mock is already set by Set")
	}

	if mmSendReport.defaultExpectation == nil {
		mmSendReport.defaultExpectation = &ReportSenderMockSendReportExpectation{mock: mmSendReport.mock}
	}
	mmSendReport.defaultExpectation.results = &ReportSenderMockSendReportResults{err}
	return mmSendReport.mock
}

//Set uses given function f to mock the reportSender.SendReport method
func (mmSendReport *mReportSenderMockSendReport) Set(f func(ctx context.Context, userId int64, report core_models.Report) (err error)) *ReportSenderMock {
	if mmSendReport.defaultExpectation != nil {
		mmSendReport.mock.t.Fatalf("Default expectation is already set for the reportSender.SendReport method")
	}

	if len(mmSendReport.expectations) > 0 {
		mmSendReport.mock.t.Fatalf("Some expectations are already set for the reportSender.SendReport method")
	}

	mmSendReport.mock.funcSendReport = f
	return mmSendReport.mock
}

// When sets expectation for the reportSender.SendReport which will trigger the result defined by the following
// Then helper
func (mmSendReport *mReportSenderMockSendReport) When(ctx context.Context, userId int64, report core_models.Report) *ReportSenderMockSendReportExpectation {
	if mmSendReport.mock.funcSendReport != nil {
		mmSendReport.mock.t.Fatalf("ReportSenderMock.SendReport mock is already set by Set")
	}

	expectation := &ReportSenderMockSendReportExpectation{
		mock:   mmSendReport.mock,
		params: &ReportSenderMockSendReportParams{ctx, userId, report},
	}
	mmSendReport.expectations = append(mmSendReport.expectations, expectation)
	return expectation
}

// Then sets up reportSender.SendReport return parameters for the expectation previously defined by the When method
func (e *ReportSenderMockSendReportExpectation) Then(err error) *ReportSenderMock {
	e.results = &ReportSenderMockSendReportResults{err}
	return e.mock
}

// SendReport implements finance_transport_mq_handlers.reportSender
func (mmSendReport *ReportSenderMock) SendReport(ctx context.Context, userId int64, report core_models.Report) (err error) {
	mm_atomic.AddUint64(&mmSendReport.beforeSendReportCounter, 1)
	defer mm_atomic.AddUint64(&mmSendReport.afterSendReportCounter, 1)

	if mmSendReport.inspectFuncSendReport != nil {
		mmSendReport.inspectFuncSendReport(ctx, userId, report)
	}

	mm_params := &ReportSenderMockSendReportParams{ctx, userId, report}

	// Record call args
	mmSendReport.SendReportMock.mutex.Lock()
	mmSendReport.SendReportMock.callArgs = append(mmSendReport.SendReportMock.callArgs, mm_params)
	mmSendReport.SendReportMock.mutex.Unlock()

	for _, e := range mmSendReport.SendReportMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendReport.SendReportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendReport.SendReportMock.defaultExpectation.Counter, 1)
		mm_want := mmSendReport.SendReportMock.defaultExpectation.params
		mm_got := ReportSenderMockSendReportParams{ctx, userId, report}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendReport.t.Errorf("ReportSenderMock.SendReport got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendReport.SendReportMock.defaultExpectation.results
		if mm_results == nil {
			mmSendReport.t.Fatal("No results are set for the ReportSenderMock.SendReport")
		}
		return (*mm_results).err
	}
	if mmSendReport.funcSendReport != nil {
		return mmSendReport.funcSendReport(ctx, userId, report)
	}
	mmSendReport.t.Fatalf("Unexpected call to ReportSenderMock.SendReport. %v %v %v", ctx, userId, report)
	return
}

// SendReportAfterCounter returns a count of finished ReportSenderMock.SendReport invocations
func (mmSendReport *ReportSenderMock) SendReportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendReport.afterSendReportCounter)
}

// SendReportBeforeCounter returns a count of ReportSenderMock.SendReport invocations
func (mmSendReport *ReportSenderMock) SendReportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendReport.beforeSendReportCounter)
}

// Calls returns a list of arguments used in each call to ReportSenderMock.SendReport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendReport *mReportSenderMockSendReport) Calls() []*ReportSenderMockSendReportParams {
	mmSendReport.mutex.RLock()

	argCopy := make([]*ReportSenderMockSendReportParams, len(mmSendReport.callArgs))
	copy(argCopy, mmSendReport.callArgs)

	mmSendReport.mutex.RUnlock()

	return argCopy
}

// MinimockSendReportDone returns true if the count of the SendReport invocations corresponds
// the number of defined expectations
func (m *ReportSenderMock) MinimockSendReportDone() bool {
	for _, e := range m.SendReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendReportCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendReport != nil && mm_atomic.LoadUint64(&m.afterSendReportCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendReportInspect logs each unmet expectation
func (m *ReportSenderMock) MinimockSendReportInspect() {
	for _, e := range m.SendReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReportSenderMock.SendReport with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendReportCounter) < 1 {
		if m.SendReportMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ReportSenderMock.SendReport")
		} else {
			m.t.Errorf("Expected call to ReportSenderMock.SendReport with params: %#v", *m.SendReportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendReport != nil && mm_atomic.LoadUint64(&m.afterSendReportCounter) < 1 {
		m.t.Error("Expected call to ReportSenderMock.SendReport")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReportSenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSendReportInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReportSenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReportSenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendReportDone()
}
