package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/shav/telegram-bot/internal/modules/finances/transport/message_queue/handlers.spendingReportBuilder -o ./mocks\spending_report_builder.go -n SpendingReportBuilderMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/shav/telegram-bot/internal/common/date"
	core_models "github.com/shav/telegram-bot/internal/modules/core/domain/models"
)

// SpendingReportBuilderMock implements finance_transport_mq_handlers.spendingReportBuilder
type SpendingReportBuilderMock struct {
	t minimock.Tester

	funcGetSpendingReport          func(ctx context.Context, userId int64, periodName string, dateInterval date.Interval) (r1 core_models.Report, err error)
	inspectFuncGetSpendingReport   func(ctx context.Context, userId int64, periodName string, dateInterval date.Interval)
	afterGetSpendingReportCounter  uint64
	beforeGetSpendingReportCounter uint64
	GetSpendingReportMock          mSpendingReportBuilderMockGetSpendingReport
}

// NewSpendingReportBuilderMock returns a mock for finance_transport_mq_handlers.spendingReportBuilder
func NewSpendingReportBuilderMock(t minimock.Tester) *SpendingReportBuilderMock {
	m := &SpendingReportBuilderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetSpendingReportMock = mSpendingReportBuilderMockGetSpendingReport{mock: m}
	m.GetSpendingReportMock.callArgs = []*SpendingReportBuilderMockGetSpendingReportParams{}

	return m
}

type mSpendingReportBuilderMockGetSpendingReport struct {
	mock               *SpendingReportBuilderMock
	defaultExpectation *SpendingReportBuilderMockGetSpendingReportExpectation
	expectations       []*SpendingReportBuilderMockGetSpendingReportExpectation

	callArgs []*SpendingReportBuilderMockGetSpendingReportParams
	mutex    sync.RWMutex
}

// SpendingReportBuilderMockGetSpendingReportExpectation specifies expectation struct of the spendingReportBuilder.GetSpendingReport
type SpendingReportBuilderMockGetSpendingReportExpectation struct {
	mock    *SpendingReportBuilderMock
	params  *SpendingReportBuilderMockGetSpendingReportParams
	results *SpendingReportBuilderMockGetSpendingReportResults
	Counter uint64
}

// SpendingReportBuilderMockGetSpendingReportParams contains parameters of the spendingReportBuilder.GetSpendingReport
type SpendingReportBuilderMockGetSpendingReportParams struct {
	ctx          context.Context
	userId       int64
	periodName   string
	dateInterval date.Interval
}

// SpendingReportBuilderMockGetSpendingReportResults contains results of the spendingReportBuilder.GetSpendingReport
type SpendingReportBuilderMockGetSpendingReportResults struct {
	r1  core_models.Report
	err error
}

// Expect sets up expected params for spendingReportBuilder.GetSpendingReport
func (mmGetSpendingReport *mSpendingReportBuilderMockGetSpendingReport) Expect(ctx context.Context, userId int64, periodName string, dateInterval date.Interval) *mSpendingReportBuilderMockGetSpendingReport {
	if mmGetSpendingReport.mock.funcGetSpendingReport != nil {
		mmGetSpendingReport.mock.t.Fatalf("SpendingReportBuilderMock.GetSpendingReport mock is already set by Set")
	}

	if mmGetSpendingReport.defaultExpectation == nil {
		mmGetSpendingReport.defaultExpectation = &SpendingReportBuilderMockGetSpendingReportExpectation{}
	}

	mmGetSpendingReport.defaultExpectation.params = &SpendingReportBuilderMockGetSpendingReportParams{ctx, userId, periodName, dateInterval}
	for _, e := range mmGetSpendingReport.expectations {
		if minimock.Equal(e.params, mmGetSpendingReport.defaultExpectation.params) {
			mmGetSpendingReport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSpendingReport.defaultExpectation.params)
		}
	}

	return mmGetSpendingReport
}

// Inspect accepts an inspector function that has same arguments as the spendingReportBuilder.GetSpendingReport
func (mmGetSpendingReport *mSpendingReportBuilderMockGetSpendingReport) Inspect(f func(ctx context.Context, userId int64, periodName string, dateInterval date.Interval)) *mSpendingReportBuilderMockGetSpendingReport {
	if mmGetSpendingReport.mock.inspectFuncGetSpendingReport != nil {
		mmGetSpendingReport.mock.t.Fatalf("Inspect function is already set for SpendingReportBuilderMock.GetSpendingReport")
	}

	mmGetSpendingReport.mock.inspectFuncGetSpendingReport = f

	return mmGetSpendingReport
}

// Return sets up results that will be returned by spendingReportBuilder.GetSpendingReport
func (mmGetSpendingReport *mSpendingReportBuilderMockGetSpendingReport) Return(r1 core_models.Report, err error) *SpendingReportBuilderMock {
	if mmGetSpendingReport.mock.funcGetSpendingReport != nil {
		mmGetSpendingReport.mock.t.Fatalf("SpendingReportBuilderMock.GetSpendingReport mock is already set by Set")
	}

	if mmGetSpendingReport.defaultExpectation == nil {
		mmGetSpendingReport.defaultExpectation = &SpendingReportBuilderMockGetSpendingReportExpectation{mock: mmGetSpendingReport.mock}
	}
	mmGetSpendingReport.defaultExpectation.results = &SpendingReportBuilderMockGetSpendingReportResults{r1, err}
	return mmGetSpendingReport.mock
}

//Set uses given function f to mock the spendingReportBuilder.GetSpendingReport method
func (mmGetSpendingReport *mSpendingReportBuilderMockGetSpendingReport) Set(f func(ctx context.Context, userId int64, periodName string, dateInterval date.Interval) (r1 core_models.Report, err error)) *SpendingReportBuilderMock {
	if mmGetSpendingReport.defaultExpectation != nil {
		mmGetSpendingReport.mock.t.Fatalf("Default expectation is already set for the spendingReportBuilder.GetSpendingReport method")
	}

	if len(mmGetSpendingReport.expectations) > 0 {
		mmGetSpendingReport.mock.t.Fatalf("Some expectations are already set for the spendingReportBuilder.GetSpendingReport method")
	}

	mmGetSpendingReport.mock.funcGetSpendingReport = f
	return mmGetSpendingReport.mock
}

// When sets expectation for the spendingReportBuilder.GetSpendingReport which will trigger the result defined by the following
// Then helper
func (mmGetSpendingReport *mSpendingReportBuilderMockGetSpendingReport) When(ctx context.Context, userId int64, periodName string, dateInterval date.Interval) *SpendingReportBuilderMockGetSpendingReportExpectation {
	if mmGetSpendingReport.mock.funcGetSpendingReport != nil {
		mmGetSpendingReport.mock.t.Fatalf("SpendingReportBuilderMock.GetSpendingReport mock is already set by Set")
	}

	expectation := &SpendingReportBuilderMockGetSpendingReportExpectation{
		mock:   mmGetSpendingReport.mock,
		params: &SpendingReportBuilderMockGetSpendingReportParams{ctx, userId, periodName, dateInterval},
	}
	mmGetSpendingReport.expectations = append(mmGetSpendingReport.expectations, expectation)
	return expectation
}

// Then sets up spendingReportBuilder.GetSpendingReport return parameters for the expectation previously defined by the When method
func (e *SpendingReportBuilderMockGetSpendingReportExpectation) Then(r1 core_models.Report, err error) *SpendingReportBuilderMock {
	e.results = &SpendingReportBuilderMockGetSpendingReportResults{r1, err}
	return e.mock
}

// GetSpendingReport implements finance_transport_mq_handlers.spendingReportBuilder
func (mmGetSpendingReport *SpendingReportBuilderMock) GetSpendingReport(ctx context.Context, userId int64, periodName string, dateInterval date.Interval) (r1 core_models.Report, err error) {
	mm_atomic.AddUint64(&mmGetSpendingReport.beforeGetSpendingReportCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSpendingReport.afterGetSpendingReportCounter, 1)

	if mmGetSpendingReport.inspectFuncGetSpendingReport != nil {
		mmGetSpendingReport.inspectFuncGetSpendingReport(ctx, userId, periodName, dateInterval)
	}

	mm_params := &SpendingReportBuilderMockGetSpendingReportParams{ctx, userId, periodName, dateInterval}

	// Record call args
	mmGetSpendingReport.GetSpendingReportMock.mutex.Lock()
	mmGetSpendingReport.GetSpendingReportMock.callArgs = append(mmGetSpendingReport.GetSpendingReportMock.callArgs, mm_params)
	mmGetSpendingReport.GetSpendingReportMock.mutex.Unlock()

	for _, e := range mmGetSpendingReport.GetSpendingReportMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmGetSpendingReport.GetSpendingReportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSpendingReport.GetSpendingReportMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSpendingReport.GetSpendingReportMock.defaultExpectation.params
		mm_got := SpendingReportBuilderMockGetSpendingReportParams{ctx, userId, periodName, dateInterval}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSpendingReport.t.Errorf("SpendingReportBuilderMock.GetSpendingReport got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSpendingReport.GetSpendingReportMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSpendingReport.t.Fatal("No results are set for the SpendingReportBuilderMock.GetSpendingReport")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmGetSpendingReport.funcGetSpendingReport != nil {
		return mmGetSpendingReport.funcGetSpendingReport(ctx, userId, periodName, dateInterval)
	}
	mmGetSpendingReport.t.Fatalf("Unexpected call to SpendingReportBuilderMock.GetSpendingReport. %v %v %v %v", ctx, userId, periodName, dateInterval)
	return
}

// GetSpendingReportAfterCounter returns a count of finished SpendingReportBuilderMock.GetSpendingReport invocations
func (mmGetSpendingReport *SpendingReportBuilderMock) GetSpendingReportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpendingReport.afterGetSpendingReportCounter)
}

// GetSpendingReportBeforeCounter returns a count of SpendingReportBuilderMock.GetSpendingReport invocations
func (mmGetSpendingReport *SpendingReportBuilderMock) GetSpendingReportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpendingReport.beforeGetSpendingReportCounter)
}

// Calls returns a list of arguments used in each call to SpendingReportBuilderMock.GetSpendingReport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSpendingReport *mSpendingReportBuilderMockGetSpendingReport) Calls() []*SpendingReportBuilderMockGetSpendingReportParams {
	mmGetSpendingReport.mutex.RLock()

	argCopy := make([]*SpendingReportBuilderMockGetSpendingReportParams, len(mmGetSpendingReport.callArgs))
	copy(argCopy, mmGetSpendingReport.callArgs)

	mmGetSpendingReport.mutex.RUnlock()

	return argCopy
}

// MinimockGetSpendingReportDone returns true if the count of the GetSpendingReport invocations corresponds
// the number of defined expectations
func (m *SpendingReportBuilderMock) MinimockGetSpendingReportDone() bool {
	for _, e := range m.GetSpendingReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpendingReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpendingReportCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpendingReport != nil && mm_atomic.LoadUint64(&m.afterGetSpendingReportCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSpendingReportInspect logs each unmet expectation
func (m *SpendingReportBuilderMock) MinimockGetSpendingReportInspect() {
	for _, e := range m.GetSpendingReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SpendingReportBuilderMock.GetSpendingReport with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpendingReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpendingReportCounter) < 1 {
		if m.GetSpendingReportMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SpendingReportBuilderMock.GetSpendingReport")
		} else {
			m.t.Errorf("Expected call to SpendingReportBuilderMock.GetSpendingReport with params: %#v", *m.GetSpendingReportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpendingReport != nil && mm_atomic.LoadUint64(&m.afterGetSpendingReportCounter) < 1 {
		m.t.Error("Expected call to SpendingReportBuilderMock.GetSpendingReport")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SpendingReportBuilderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetSpendingReportInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SpendingReportBuilderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SpendingReportBuilderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetSpendingReportDone()
}
